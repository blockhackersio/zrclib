/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  MerkleTreeForBlocklist,
  MerkleTreeForBlocklistInterface,
} from "../../../../@zrclib/sdk/contracts/MerkleTreeForBlocklist";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_levels",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "_verifier",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "NewBlockDeposit",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "proof",
            type: "bytes",
          },
          {
            internalType: "bytes32",
            name: "oldRoot",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "newRoot",
            type: "bytes32",
          },
        ],
        internalType: "struct MerkleTreeForBlocklist.ProofArguments",
        name: "proof",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "blockDeposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "blockIndices",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "levels",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "parseProof",
    outputs: [
      {
        internalType: "uint256[2]",
        name: "a",
        type: "uint256[2]",
      },
      {
        internalType: "uint256[2][2]",
        name: "b",
        type: "uint256[2][2]",
      },
      {
        internalType: "uint256[2]",
        name: "c",
        type: "uint256[2]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "root",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "verifier",
    outputs: [
      {
        internalType: "contract BlocklistVerifier",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161082238038061082283398101604081905261002f91610140565b60008263ffffffff16116100965760405162461bcd60e51b815260206004820152602360248201527f5f6c6576656c732073686f756c642062652067726561746572207468616e207a60448201526265726f60e81b60648201526084015b60405180910390fd5b60208263ffffffff16106100ec5760405162461bcd60e51b815260206004820152601e60248201527f5f6c6576656c732073686f756c64206265206c657373207468616e2033320000604482015260640161008d565b63ffffffff919091166080527f2fa27c5cf0185654d6dcf10df1b382324abdf62d73d395be1cc935ab470354f0600055600280546001600160a01b0319166001600160a01b0390921691909117905561018f565b6000806040838503121561015357600080fd5b825163ffffffff8116811461016757600080fd5b60208401519092506001600160a01b038116811461018457600080fd5b809150509250929050565b6080516106796101a9600039600060b101526106796000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806309ab9953146100675780632b7ac3f31461007c5780634ecf518b146100ac578063793deea3146100e8578063ebf0c7171461010a578063f4690d3114610121575b600080fd5b61007a610075366004610353565b610154565b005b60025461008f906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100d37f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff90911681526020016100a3565b6100fb6100f63660046103b3565b610213565b6040516100a3939291906104e5565b61011360005481565b6040519081526020016100a3565b61014461012f366004610516565b60016020526000908152604090205460ff1681565b60405190151581526020016100a3565b604080518082018252602080850135825291840135918101919091526101b961017d848061052f565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250859250610272915050565b5060408381013560009081558381526001602081815291839020805460ff1916909117905590518381527f0f5fe8e5ef2da61c43c2ba07a05ee5225f5d5a6c6ad4c274f1ed94748d2fedcf910160405180910390a1505050565b61021b610308565b610223610326565b61022b610308565b8380602001905181019061023f919061057d565b895160208b8101518b820193909352928a5281830193909352929092528082019290925291905285015283529193909250565b60008060008061028186610213565b600254604051637ae4eb4f60e11b815293965091945092506001600160a01b03169063f5c9d69e906102bd908690869086908b906004016105da565b602060405180830381865afa1580156102da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102fe919061061a565b9695505050505050565b60405180604001604052806002906020820280368337509192915050565b60405180604001604052806002905b61033d610308565b8152602001906001900390816103355790505090565b6000806040838503121561036657600080fd5b823567ffffffffffffffff81111561037d57600080fd5b83016060818603121561038f57600080fd5b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156103c557600080fd5b813567ffffffffffffffff808211156103dd57600080fd5b818401915084601f8301126103f157600080fd5b8135818111156104035761040361039d565b604051601f8201601f19908116603f0116810190838211818310171561042b5761042b61039d565b8160405282815287602084870101111561044457600080fd5b826020860160208301376000928101602001929092525095945050505050565b8060005b6002811015610487578151845260209384019390910190600101610468565b50505050565b806000805b60028082106104a157506104de565b835186845b838110156104c45782518252602092830192909101906001016104a6565b505050604095909501945060209290920191600101610492565b5050505050565b61010081016104f48286610464565b610501604083018561048d565b61050e60c0830184610464565b949350505050565b60006020828403121561052857600080fd5b5035919050565b6000808335601e1984360301811261054657600080fd5b83018035915067ffffffffffffffff82111561056157600080fd5b60200191503681900382131561057657600080fd5b9250929050565b600080600080600080600080610100898b03121561059a57600080fd5b505086516020880151604089015160608a015160808b015160a08c015160c08d015160e0909d0151959e949d50929b919a50985090965094509092509050565b61014081016105e98287610464565b6105f6604083018661048d565b61060360c0830185610464565b610611610100830184610464565b95945050505050565b60006020828403121561062c57600080fd5b8151801515811461063c57600080fd5b939250505056fea2646970667358221220ae81d53f2a56399de75ff1adc1e0034ca15a60018f4794483745eae54b1768a564736f6c63430008120033";

type MerkleTreeForBlocklistConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MerkleTreeForBlocklistConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MerkleTreeForBlocklist__factory extends ContractFactory {
  constructor(...args: MerkleTreeForBlocklistConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _levels: PromiseOrValue<BigNumberish>,
    _verifier: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MerkleTreeForBlocklist> {
    return super.deploy(
      _levels,
      _verifier,
      overrides || {}
    ) as Promise<MerkleTreeForBlocklist>;
  }
  override getDeployTransaction(
    _levels: PromiseOrValue<BigNumberish>,
    _verifier: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_levels, _verifier, overrides || {});
  }
  override attach(address: string): MerkleTreeForBlocklist {
    return super.attach(address) as MerkleTreeForBlocklist;
  }
  override connect(signer: Signer): MerkleTreeForBlocklist__factory {
    return super.connect(signer) as MerkleTreeForBlocklist__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MerkleTreeForBlocklistInterface {
    return new utils.Interface(_abi) as MerkleTreeForBlocklistInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MerkleTreeForBlocklist {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MerkleTreeForBlocklist;
  }
}
