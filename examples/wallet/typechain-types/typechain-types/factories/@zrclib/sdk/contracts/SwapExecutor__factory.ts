/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  SwapExecutor,
  SwapExecutorInterface,
} from "../../../../@zrclib/sdk/contracts/SwapExecutor";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenIn",
        type: "address",
      },
      {
        internalType: "address",
        name: "_tokenOut",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_amountOutMin",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_swapRouter",
        type: "address",
      },
      {
        internalType: "address",
        name: "_swapRecipient",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_swapData",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "_transactData",
        type: "bytes",
      },
    ],
    name: "executeSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610df8806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063a0c6a6ef14610030575b600080fd5b61004361003e36600461070f565b610045565b005b61005a6001600160a01b038b168760006102cb565b61006e6001600160a01b038b16878a6102cb565b6000866001600160a01b0316858560405161008a9291906107d8565b6000604051808303816000865af19150503d80600081146100c7576040519150601f19603f3d011682016040523d82523d6000602084013e6100cc565b606091505b50509050806101225760405162461bcd60e51b815260206004820152601960248201527f537761704578656375746f723a2073776170206661696c65640000000000000060448201526064015b60405180910390fd5b506040516370a0823160e01b81523060048201526000906001600160a01b038b16906370a0823190602401602060405180830381865afa15801561016a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061018e91906107e8565b9050878110156101f25760405162461bcd60e51b815260206004820152602960248201527f537761704578656375746f723a207265636569766564206c657373207468616e60448201526808195e1c1958dd195960ba1b6064820152608401610119565b6001600160a01b0386166102aa5760008061020f84860186610a77565b90925090506102296001600160a01b038d163360006102cb565b61023d6001600160a01b038d16338c6102cb565b604080518082018252838152602081018390529051636227432960e01b815233916362274329916102719190600401610cc2565b600060405180830381600087803b15801561028b57600080fd5b505af115801561029f573d6000803e3d6000fd5b5050505050506102be565b6102be6001600160a01b038b168783610418565b5050505050505050505050565b8015806103455750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa15801561031f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034391906107e8565b155b6103b05760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610119565b6040516001600160a01b03831660248201526044810182905261041390849063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610448565b505050565b6040516001600160a01b03831660248201526044810182905261041390849063a9059cbb60e01b906064016103dc565b600061049d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661051a9092919063ffffffff16565b80519091501561041357808060200190518101906104bb9190610d6a565b6104135760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610119565b60606105298484600085610531565b949350505050565b6060824710156105925760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610119565b600080866001600160a01b031685876040516105ae9190610d93565b60006040518083038185875af1925050503d80600081146105eb576040519150601f19603f3d011682016040523d82523d6000602084013e6105f0565b606091505b50915091506106018783838761060c565b979650505050505050565b6060831561067b578251600003610674576001600160a01b0385163b6106745760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610119565b5081610529565b61052983838151156106905781518083602001fd5b8060405162461bcd60e51b81526004016101199190610daf565b80356001600160a01b03811681146106c157600080fd5b919050565b60008083601f8401126106d857600080fd5b50813567ffffffffffffffff8111156106f057600080fd5b60208301915083602082850101111561070857600080fd5b9250929050565b6000806000806000806000806000806101008b8d03121561072f57600080fd5b6107388b6106aa565b995061074660208c016106aa565b985060408b0135975060608b0135965061076260808c016106aa565b955061077060a08c016106aa565b945060c08b013567ffffffffffffffff8082111561078d57600080fd5b6107998e838f016106c6565b909650945060e08d01359150808211156107b257600080fd5b506107bf8d828e016106c6565b915080935050809150509295989b9194979a5092959850565b8183823760009101908152919050565b6000602082840312156107fa57600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b604051610140810167ffffffffffffffff8111828210171561083b5761083b610801565b60405290565b60405160e0810167ffffffffffffffff8111828210171561083b5761083b610801565b600082601f83011261087557600080fd5b813567ffffffffffffffff8082111561089057610890610801565b604051601f8301601f19908116603f011681019082821181831017156108b8576108b8610801565b816040528381528660208588010111156108d157600080fd5b836020870160208301376000602085830101528094505050505092915050565b600082601f83011261090257600080fd5b6040516040810181811067ffffffffffffffff8211171561092557610925610801565b806040525080604084018581111561093c57600080fd5b845b8181101561095657803583526020928301920161093e565b509195945050505050565b6000610140828403121561097457600080fd5b61097c610817565b9050610987826106aa565b815260208201356020820152604082013567ffffffffffffffff808211156109ae57600080fd5b6109ba85838601610864565b604084015260608401359150808211156109d357600080fd5b6109df85838601610864565b60608401526109f0608085016106aa565b608084015260a084013560a0840152610a0b60c085016106aa565b60c0840152610a1c60e085016106aa565b60e084015261010091508184013581811115610a3757600080fd5b610a4386828701610864565b838501525061012091508184013581811115610a5e57600080fd5b610a6a86828701610864565b8385015250505092915050565b60008060408385031215610a8a57600080fd5b823567ffffffffffffffff80821115610aa257600080fd5b908401906101208287031215610ab757600080fd5b610abf610841565b823582811115610ace57600080fd5b610ada88828601610864565b82525060208301356020820152610af487604085016108f1565b6040820152610b0687608085016108f1565b606082015260c08301356080820152610b2160e084016106aa565b60a082015261010083013560c0820152809450506020850135915080821115610b4957600080fd5b50610b5685828601610961565b9150509250929050565b60005b83811015610b7b578181015183820152602001610b63565b50506000910152565b60008151808452610b9c816020860160208601610b60565b601f01601f19169290920160200192915050565b8060005b6002811015610bd3578151845260209384019390910190600101610bb4565b50505050565b80516001600160a01b031682526000610140602083015160208501526040830151816040860152610c0c82860182610b84565b91505060608301518482036060860152610c268282610b84565b9150506080830151610c4360808601826001600160a01b03169052565b5060a083015160a085015260c0830151610c6860c08601826001600160a01b03169052565b5060e0830151610c8360e08601826001600160a01b03169052565b506101008084015185830382870152610c9c8382610b84565b925050506101208084015185830382870152610cb88382610b84565b9695505050505050565b6020815260008251604060208401528051610120806060860152610cea610180860183610b84565b9150602083015160808601526040830151610d0860a0870182610bb0565b506060830151610d1b60e0870182610bb0565b5060808301519085015260a08201516001600160a01b031661014085015260c0909101516101608401526020840151838203601f1901604085015290610d618183610bd9565b95945050505050565b600060208284031215610d7c57600080fd5b81518015158114610d8c57600080fd5b9392505050565b60008251610da5818460208701610b60565b9190910192915050565b602081526000610d8c6020830184610b8456fea2646970667358221220e40708e399b8d9d53dcf0ab0c6d0e54260adbb31445c0f07178c7de7ca442e2264736f6c63430008120033";

type SwapExecutorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SwapExecutorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SwapExecutor__factory extends ContractFactory {
  constructor(...args: SwapExecutorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SwapExecutor> {
    return super.deploy(overrides || {}) as Promise<SwapExecutor>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SwapExecutor {
    return super.attach(address) as SwapExecutor;
  }
  override connect(signer: Signer): SwapExecutor__factory {
    return super.connect(signer) as SwapExecutor__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapExecutorInterface {
    return new utils.Interface(_abi) as SwapExecutorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SwapExecutor {
    return new Contract(address, _abi, signerOrProvider) as SwapExecutor;
  }
}
