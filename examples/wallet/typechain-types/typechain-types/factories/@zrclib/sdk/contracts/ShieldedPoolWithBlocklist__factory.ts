/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  ShieldedPoolWithBlocklist,
  ShieldedPoolWithBlocklistInterface,
} from "../../../../@zrclib/sdk/contracts/ShieldedPoolWithBlocklist";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_levels",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "_hasher",
        type: "address",
      },
      {
        internalType: "address",
        name: "_transactionVerifier",
        type: "address",
      },
      {
        internalType: "address",
        name: "_blocklistVerifier",
        type: "address",
      },
      {
        internalType: "address",
        name: "_swapExecutor",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "commitment",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "encryptedOutput",
        type: "bytes",
      },
    ],
    name: "NewCommitment",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "nullifier",
        type: "bytes32",
      },
    ],
    name: "NewNullifier",
    type: "event",
  },
  {
    inputs: [],
    name: "FIELD_SIZE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MAX_EXT_AMOUNT",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ROOT_HISTORY_SIZE",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ZERO_VALUE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "blocklistTree",
    outputs: [
      {
        internalType: "contract MerkleTreeForBlocklist",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "currentRootIndex",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "filledSubtrees",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_left",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "_right",
        type: "bytes32",
      },
    ],
    name: "hashLeftRight",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "hasher",
    outputs: [
      {
        internalType: "contract IHasher",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_root",
        type: "bytes32",
      },
    ],
    name: "isKnownRoot",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_nullifierHash",
        type: "bytes32",
      },
    ],
    name: "isSpent",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "levels",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nextIndex",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "nullifierHashes",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "parseProof",
    outputs: [
      {
        internalType: "uint256[2]",
        name: "a",
        type: "uint256[2]",
      },
      {
        internalType: "uint256[2][2]",
        name: "b",
        type: "uint256[2][2]",
      },
      {
        internalType: "uint256[2]",
        name: "c",
        type: "uint256[2]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "roots",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "swapExecutor",
    outputs: [
      {
        internalType: "contract SwapExecutor",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "bytes",
                name: "proof",
                type: "bytes",
              },
              {
                internalType: "bytes32",
                name: "root",
                type: "bytes32",
              },
              {
                internalType: "bytes32[2]",
                name: "inputNullifiers",
                type: "bytes32[2]",
              },
              {
                internalType: "bytes32[2]",
                name: "outputCommitments",
                type: "bytes32[2]",
              },
              {
                internalType: "uint256",
                name: "publicAmount",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "publicAsset",
                type: "address",
              },
              {
                internalType: "bytes32",
                name: "extDataHash",
                type: "bytes32",
              },
            ],
            internalType: "struct AbstractShieldedPool.ProofArguments",
            name: "proofArguments",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "address",
                name: "recipient",
                type: "address",
              },
              {
                internalType: "int256",
                name: "extAmount",
                type: "int256",
              },
              {
                internalType: "bytes",
                name: "encryptedOutput1",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "encryptedOutput2",
                type: "bytes",
              },
              {
                internalType: "address",
                name: "tokenOut",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amountOutMin",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "swapRecipient",
                type: "address",
              },
              {
                internalType: "address",
                name: "swapRouter",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "swapData",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "transactData",
                type: "bytes",
              },
            ],
            internalType: "struct AbstractShieldedPool.ExtData",
            name: "extData",
            type: "tuple",
          },
        ],
        internalType: "struct AbstractShieldedPool.Proof",
        name: "_proof",
        type: "tuple",
      },
    ],
    name: "transact",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "bytes",
                name: "proof",
                type: "bytes",
              },
              {
                internalType: "bytes32",
                name: "root",
                type: "bytes32",
              },
              {
                internalType: "bytes32[2]",
                name: "inputNullifiers",
                type: "bytes32[2]",
              },
              {
                internalType: "bytes32[2]",
                name: "outputCommitments",
                type: "bytes32[2]",
              },
              {
                internalType: "uint256",
                name: "publicAmount",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "publicAsset",
                type: "address",
              },
              {
                internalType: "bytes32",
                name: "extDataHash",
                type: "bytes32",
              },
            ],
            internalType: "struct AbstractShieldedPool.ProofArguments",
            name: "proofArguments",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "address",
                name: "recipient",
                type: "address",
              },
              {
                internalType: "int256",
                name: "extAmount",
                type: "int256",
              },
              {
                internalType: "bytes",
                name: "encryptedOutput1",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "encryptedOutput2",
                type: "bytes",
              },
              {
                internalType: "address",
                name: "tokenOut",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amountOutMin",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "swapRecipient",
                type: "address",
              },
              {
                internalType: "address",
                name: "swapRouter",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "swapData",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "transactData",
                type: "bytes",
              },
            ],
            internalType: "struct AbstractShieldedPool.ExtData",
            name: "extData",
            type: "tuple",
          },
        ],
        internalType: "struct AbstractShieldedPool.Proof",
        name: "_proof",
        type: "tuple",
      },
    ],
    name: "transactAndSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "verifier",
    outputs: [
      {
        internalType: "contract CompliantVerifier",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "i",
        type: "uint256",
      },
    ],
    name: "zeros",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c0604052600280546001600160401b0319169055600160f81b6003553480156200002957600080fd5b5060405162003775380380620037758339810160408190526200004c916200090c565b848460008263ffffffff1611620000b65760405162461bcd60e51b815260206004820152602360248201527f5f6c6576656c732073686f756c642062652067726561746572207468616e207a60448201526265726f60e81b60648201526084015b60405180910390fd5b60208263ffffffff16106200010e5760405162461bcd60e51b815260206004820152601e60248201527f5f6c6576656c732073686f756c64206265206c657373207468616e20333200006044820152606401620000ad565b63ffffffff90911660a0526001600160a01b03908116608052600780548583166001600160a01b0319918216179091556005805492841692909116919091179055604051859083906200016190620008e6565b63ffffffff90921682526001600160a01b03166020820152604001604051809103906000f08015801562000199573d6000803e3d6000fd5b50600680546001600160a01b0319166001600160a01b0392909216919091179055620001c4620001cf565b5050505050620009b8565b60005b60a05163ffffffff168163ffffffff1610156200022557620001fa63ffffffff821662000267565b63ffffffff8216600090815260208190526040902055806200021c8162000986565b915050620001d2565b5060a0516200023a9063ffffffff1662000267565b6000805260016020527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb4955565b6000816000036200029957507f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c919050565b81600103620002c957507f13e37f2d6cb86c78ccc1788607c2b199788c6bb0a615a21f2e7a8e88384222f8919050565b81600203620002f957507f217126fa352c326896e8c2803eec8fd63ad50cf65edfef27a41a9e32dc622765919050565b816003036200032957507f0e28a61a9b3e91007d5a9e3ada18e1b24d6d230c618388ee5df34cacd7397eee919050565b816004036200035957507f27953447a6979839536badc5425ed15fadb0e292e9bc36f92f0aa5cfa5013587919050565b816005036200038957507f194191edbfb91d10f6a7afd315f33095410c7801c47175c2df6dc2cce0e3affc919050565b81600603620003b957507f1733dece17d71190516dbaf1927936fa643dc7079fc0cc731de9d6845a47741f919050565b81600703620003e957507f267855a7dc75db39d81d17f95d0a7aa572bf5ae19f4db0e84221d2b2ef999219919050565b816008036200041957507f1184e11836b4c36ad8238a340ecc0985eeba665327e33e9b0e3641027c27620d919050565b816009036200044957507f0702ab83a135d7f55350ab1bfaa90babd8fc1d2b3e6a7215381a7b2213d6c5ce919050565b81600a036200047957507f2eecc0de814cfd8c57ce882babb2e30d1da56621aef7a47f3291cffeaec26ad7919050565b81600b03620004a957507f280bc02145c155d5833585b6c7b08501055157dd30ce005319621dc462d33b47919050565b81600c03620004d957507f045132221d1fa0a7f4aed8acd2cbec1e2189b7732ccb2ec272b9c60f0d5afc5b919050565b81600d036200050957507f27f427ccbf58a44b1270abbe4eda6ba53bd6ac4d88cf1e00a13c4371ce71d366919050565b81600e036200053957507f1617eaae5064f26e8f8a6493ae92bfded7fde71b65df1ca6d5dcec0df70b2cef919050565b81600f036200056957507f20c6b400d0ea1b15435703c31c31ee63ad7ba5c8da66cec2796feacea575abca919050565b816010036200059957507f09589ddb438723f53a8e57bdada7c5f8ed67e8fece3889a73618732965645eec919050565b81601103620005c857507e64b6a738a5ff537db7b220f3394f0ecbd35bfd355c5425dc1166bf3236079b919050565b81601203620005f857507f095de56281b1d5055e897c3574ff790d5ee81dbc5df784ad2d67795e557c9e9f919050565b816013036200062857507f11cf2e2887aa21963a6ec14289183efe4d4c60f14ecd3d6fe0beebdf855a9b63919050565b816014036200065857507f2b0f6fc0179fa65b6f73627c0e1e84c7374d2eaec44c9a48f2571393ea77bcbb919050565b816015036200068857507f16fdb637c2abf9c0f988dbf2fd64258c46fb6a273d537b2cf1603ea460b13279919050565b81601603620006b857507f21bbd7e944f6124dad4c376df9cc12e7ca66e47dff703ff7cedb1a454edcf0ff919050565b81601703620006e857507f2784f8220b1c963e468f590f137baaa1625b3b92a27ad9b6e84eb0d3454d9962919050565b816018036200071857507f16ace1a65b7534142f8cc1aad810b3d6a7a74ca905d9c275cb98ba57e509fc10919050565b816019036200074857507f2328068c6a8c24265124debd8fe10d3f29f0665ea725a65e3638f6192a96a013919050565b81601a036200077857507f2ddb991be1f028022411b4c4d2c22043e5e751c120736f00adf54acab1c9ac14919050565b81601b03620007a857507f0113798410eaeb95056a464f70521eb58377c0155f2fe518a5594d38cc209cc0919050565b81601c03620007d857507f202d1ae61526f0d0d01ef80fb5d4055a7af45721024c2c24cffd6a3798f54d50919050565b81601d036200080857507f23ab323453748129f2765f79615022f5bebd6f4096a796300aab049a60b0f187919050565b81601e036200083857507f1f15585f8947e378bcf8bd918716799da909acdb944c57150b1eb4565fda8aa0919050565b81601f036200086857507f1eb064b21055ac6a350cf41eb30e4ce2cb19680217df3a243617c2838185ad06919050565b816020036200089857507f25a90efc49af54a5b7154a6eaba978dcf04796b4984fe54be8d4ea8579e1f1e6919050565b60405162461bcd60e51b815260206004820152601360248201527f496e646578206f7574206f6620626f756e6473000000000000000000000000006044820152606401620000ad565b919050565b6108228062002f5383390190565b80516001600160a01b0381168114620008e157600080fd5b600080600080600060a086880312156200092557600080fd5b855163ffffffff811681146200093a57600080fd5b94506200094a60208701620008f4565b93506200095a60408701620008f4565b92506200096a60608701620008f4565b91506200097a60808701620008f4565b90509295509295909350565b600063ffffffff808316818103620009ae57634e487b7160e01b600052601160045260246000fd5b6001019392505050565b60805160a051612560620009f3600039600081816101f801528181611757015261181401526000818161035f01526104a501526125606000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c806384fcec46116100b8578063e5285dcc1161007c578063e5285dcc146102fd578063e829558814610320578063ec73295914610333578063ed33639f1461035a578063f178e47c14610381578063fc7e9c6f146103a157600080fd5b806384fcec461461029557806390eeb02b146102a8578063ba70f757146102b8578063c2b40ae4146102d5578063cd87a3b4146102f557600080fd5b80634ecf518b1161010a5780634ecf518b146101f3578063622743291461022f5780636d9833e31461024457806375d8498f14610257578063793deea31461026a5780637fe24ffe1461028c57600080fd5b806317cc915c146101475780632b7ac3f31461017f5780632c876da2146101aa57806338bf282e146101bd578063414a37ba146101de575b600080fd5b61016a6101553660046119b1565b60046020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b600754610192906001600160a01b031681565b6040516001600160a01b039091168152602001610176565b600654610192906001600160a01b031681565b6101d06101cb3660046119ca565b6103b9565b604051908152602001610176565b6101d060008051602061250b83398151915281565b61021a7f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff9091168152602001610176565b61024261023d3660046119ec565b61052d565b005b61016a6102523660046119b1565b6105c2565b6102426102653660046119ec565b610640565b61027d610278366004611b41565b6109ce565b60405161017693929190611bf0565b6101d060035481565b600554610192906001600160a01b031681565b60025461021a9063ffffffff1681565b60025463ffffffff166000908152600160205260409020546101d0565b6101d06102e33660046119b1565b60016020526000908152604090205481565b61021a606481565b61016a61030b3660046119b1565b60009081526004602052604090205460ff1690565b6101d061032e3660046119b1565b610a2d565b6101d07f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c81565b6101927f000000000000000000000000000000000000000000000000000000000000000081565b6101d061038f3660046119b1565b60006020819052908152604090205481565b60025461021a90640100000000900463ffffffff1681565b600060008051602061250b833981519152831061041d5760405162461bcd60e51b815260206004820181905260248201527f5f6c6566742073686f756c6420626520696e7369646520746865206669656c6460448201526064015b60405180910390fd5b60008051602061250b83398151915282106104845760405162461bcd60e51b815260206004820152602160248201527f5f72696768742073686f756c6420626520696e7369646520746865206669656c6044820152601960fa1b6064820152608401610414565b61048c611966565b8381526020810183905260405163014cf2b360e51b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063299e5660906104e2908490600401611c37565b602060405180830381865afa1580156104ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105239190611c68565b9150505b92915050565b6005546001600160a01b03166105466020830183611c81565b610554906020810190611cb9565b6001600160a01b0316036105b65760405162461bcd60e51b8152602060048201526024808201527f726563697069656e742073686f756c64206e6f742062652073776170457865636044820152633aba37b960e11b6064820152608401610414565b6105bf81611080565b50565b60008181036105d357506000919050565b60025463ffffffff16805b63ffffffff81166000908152600160205260409020548403610604575060019392505050565b8063ffffffff16600003610616575060645b8061062081611cea565b9150508163ffffffff168163ffffffff16036105de575060009392505050565b600061064f6020830183611c81565b60200135126106a05760405162461bcd60e51b815260206004820152601c60248201527f657874416d6f756e742073686f756c64206265206e65676174697665000000006044820152606401610414565b60006106ac8280611d0a565b6106be9061010081019060e001611cb9565b6001600160a01b0316036107145760405162461bcd60e51b815260206004820152601d60248201527f7075626c696341737365742073686f756c64206e6f74206265203078300000006044820152606401610414565b61071d81611080565b6005546001600160a01b03166107366020830183611c81565b610744906020810190611cb9565b6001600160a01b0316146107a55760405162461bcd60e51b815260206004820152602260248201527f6f6e6c7920737761704578656375746f722063616e20626520726563697069656044820152611b9d60f21b6064820152608401610414565b60006107b46020830183611c81565b6107c59060a0810190608001611cb9565b6001600160a01b03160361081b5760405162461bcd60e51b815260206004820152601a60248201527f746f6b656e4f75742073686f756c64206e6f74206265203078300000000000006044820152606401610414565b600061082a6020830183611c81565b60a00135116108895760405162461bcd60e51b815260206004820152602560248201527f616d6f756e744f75744d696e2073686f756c6420626520677265617465722074604482015264068616e20360dc1b6064820152608401610414565b6005546001600160a01b031663a0c6a6ef6108a48380611d0a565b6108b69061010081019060e001611cb9565b6108c36020850185611c81565b6108d49060a0810190608001611cb9565b6108e16020860186611c81565b602001356108ee90611d21565b6108fb6020870187611c81565b60a0013561090c6020880188611c81565b61091e9061010081019060e001611cb9565b61092b6020890189611c81565b61093c9060e081019060c001611cb9565b61094960208a018a611c81565b61095890610100810190611d3d565b61096560208c018c611c81565b61097490610120810190611d3d565b6040518b63ffffffff1660e01b81526004016109999a99989796959493929190611db4565b600060405180830381600087803b1580156109b357600080fd5b505af11580156109c7573d6000803e3d6000fd5b5050505050565b6109d6611966565b6109de611984565b6109e6611966565b838060200190518101906109fa9190611e26565b895160208b8101518b820193909352928a5281830193909352929092528082019290925291905285015283529193909250565b600081600003610a5e57507f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c919050565b81600103610a8d57507f13e37f2d6cb86c78ccc1788607c2b199788c6bb0a615a21f2e7a8e88384222f8919050565b81600203610abc57507f217126fa352c326896e8c2803eec8fd63ad50cf65edfef27a41a9e32dc622765919050565b81600303610aeb57507f0e28a61a9b3e91007d5a9e3ada18e1b24d6d230c618388ee5df34cacd7397eee919050565b81600403610b1a57507f27953447a6979839536badc5425ed15fadb0e292e9bc36f92f0aa5cfa5013587919050565b81600503610b4957507f194191edbfb91d10f6a7afd315f33095410c7801c47175c2df6dc2cce0e3affc919050565b81600603610b7857507f1733dece17d71190516dbaf1927936fa643dc7079fc0cc731de9d6845a47741f919050565b81600703610ba757507f267855a7dc75db39d81d17f95d0a7aa572bf5ae19f4db0e84221d2b2ef999219919050565b81600803610bd657507f1184e11836b4c36ad8238a340ecc0985eeba665327e33e9b0e3641027c27620d919050565b81600903610c0557507f0702ab83a135d7f55350ab1bfaa90babd8fc1d2b3e6a7215381a7b2213d6c5ce919050565b81600a03610c3457507f2eecc0de814cfd8c57ce882babb2e30d1da56621aef7a47f3291cffeaec26ad7919050565b81600b03610c6357507f280bc02145c155d5833585b6c7b08501055157dd30ce005319621dc462d33b47919050565b81600c03610c9257507f045132221d1fa0a7f4aed8acd2cbec1e2189b7732ccb2ec272b9c60f0d5afc5b919050565b81600d03610cc157507f27f427ccbf58a44b1270abbe4eda6ba53bd6ac4d88cf1e00a13c4371ce71d366919050565b81600e03610cf057507f1617eaae5064f26e8f8a6493ae92bfded7fde71b65df1ca6d5dcec0df70b2cef919050565b81600f03610d1f57507f20c6b400d0ea1b15435703c31c31ee63ad7ba5c8da66cec2796feacea575abca919050565b81601003610d4e57507f09589ddb438723f53a8e57bdada7c5f8ed67e8fece3889a73618732965645eec919050565b81601103610d7c57507e64b6a738a5ff537db7b220f3394f0ecbd35bfd355c5425dc1166bf3236079b919050565b81601203610dab57507f095de56281b1d5055e897c3574ff790d5ee81dbc5df784ad2d67795e557c9e9f919050565b81601303610dda57507f11cf2e2887aa21963a6ec14289183efe4d4c60f14ecd3d6fe0beebdf855a9b63919050565b81601403610e0957507f2b0f6fc0179fa65b6f73627c0e1e84c7374d2eaec44c9a48f2571393ea77bcbb919050565b81601503610e3857507f16fdb637c2abf9c0f988dbf2fd64258c46fb6a273d537b2cf1603ea460b13279919050565b81601603610e6757507f21bbd7e944f6124dad4c376df9cc12e7ca66e47dff703ff7cedb1a454edcf0ff919050565b81601703610e9657507f2784f8220b1c963e468f590f137baaa1625b3b92a27ad9b6e84eb0d3454d9962919050565b81601803610ec557507f16ace1a65b7534142f8cc1aad810b3d6a7a74ca905d9c275cb98ba57e509fc10919050565b81601903610ef457507f2328068c6a8c24265124debd8fe10d3f29f0665ea725a65e3638f6192a96a013919050565b81601a03610f2357507f2ddb991be1f028022411b4c4d2c22043e5e751c120736f00adf54acab1c9ac14919050565b81601b03610f5257507f0113798410eaeb95056a464f70521eb58377c0155f2fe518a5594d38cc209cc0919050565b81601c03610f8157507f202d1ae61526f0d0d01ef80fb5d4055a7af45721024c2c24cffd6a3798f54d50919050565b81601d03610fb057507f23ab323453748129f2765f79615022f5bebd6f4096a796300aab049a60b0f187919050565b81601e03610fdf57507f1f15585f8947e378bcf8bd918716799da909acdb944c57150b1eb4565fda8aa0919050565b81601f0361100e57507f1eb064b21055ac6a350cf41eb30e4ce2cb19680217df3a243617c2838185ad06919050565b8160200361103d57507f25a90efc49af54a5b7154a6eaba978dcf04796b4984fe54be8d4ea8579e1f1e6919050565b60405162461bcd60e51b8152602060048201526013602482015272496e646578206f7574206f6620626f756e647360681b6044820152606401610414565b919050565b61109661108d8280611d0a565b602001356105c2565b6110d85760405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a59081b595c9adb19481c9bdbdd606a1b6044820152606401610414565b60005b6110e58280611d0a565b5060028110156111825761112a6110fc8380611d0a565b604001826002811061111057611110611c21565b602002013560009081526004602052604090205460ff1690565b156111705760405162461bcd60e51b8152602060048201526016602482015275125b9c1d5d081a5cc8185b1c9958591e481cdc195b9d60521b6044820152606401610414565b8061117a81611e83565b9150506110db565b5060008051602061250b83398151915261119f6020830183611c81565b6040516020016111af9190611ee2565b6040516020818303038152906040528051906020012060001c6111d2919061203a565b6111dc8280611d0a565b61010001351461122e5760405162461bcd60e51b815260206004820152601c60248201527f496e636f72726563742065787465726e616c20646174612068617368000000006044820152606401610414565b60035461123a90611d21565b6112476020830183611c81565b6020013513801561126957506003546112636020830183611c81565b60200135125b6112ad5760405162461bcd60e51b8152602060048201526015602482015274125b9d985b1a59081c1d589b1a58c8185b5bdd5b9d605a1b6044820152606401610414565b6112be6112b9826121b4565b6115a5565b6112fa5760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b210383937b7b360991b6044820152606401610414565b60005b6113078280611d0a565b506002811015611372576001600460006113218580611d0a565b604001846002811061133557611335611c21565b6020020135815260200190815260200160002060006101000a81548160ff021916908315150217905550808061136a90611e83565b9150506112fd565b5060006113826020830183611c81565b6020013512156113ff57600061139b6020830183611c81565b6113a9906020810190611cb9565b6001600160a01b0316036113ff5760405162461bcd60e51b815260206004820152601e60248201527f43616e277420776974686472617720746f207a65726f206164647265737300006044820152606401610414565b61142361140c8280611d0a565b6080013561141a8380611d0a565b60a0013561173a565b50600280546114409190640100000000900463ffffffff166122a7565b63ffffffff166114508280611d0a565b608001357ff3843eddcfcac65d12d9f26261dab50671fdbf5dc44441816c8bbdace2411afd6114826020850185611c81565b611490906040810190611d3d565b60405161149e9291906122cb565b60405180910390a36002546114c390600190640100000000900463ffffffff166122a7565b63ffffffff166114d38280611d0a565b60a001357ff3843eddcfcac65d12d9f26261dab50671fdbf5dc44441816c8bbdace2411afd6115056020850185611c81565b611513906060810190611d3d565b6040516115219291906122cb565b60405180910390a360005b6115368280611d0a565b5060028110156115a15761154a8280611d0a565b604001816002811061155e5761155e611c21565b60200201357f5e58f77bbf94b46d8d896e29753e4458c6e59b48581e20ed58c9558e96f297ce60405160405180910390a28061159981611e83565b91505061152c565b5050565b604080516101208101825282516020908101518252600654835163ebf0c71760e01b81529351600094859493808501936001600160a01b03169263ebf0c7179260048082019392918290030181865afa158015611606573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061162a9190611c68565b81528451608090810151602080840191909152865160a0908101516001600160a01b0316604080860191909152885160c0908101516060808801919091528a5183015151958701959095528951909101518301519185019190915287518301515190840152865190910151015160e090910152835151909150600090819081906116b3906109ce565b60075460405163c542c93b60e01b815293965091945092506001600160a01b03169063c542c93b906116ef908690869086908a906004016122df565b602060405180830381865afa15801561170c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611730919061233c565b9695505050505050565b6002805460009164010000000090910463ffffffff169061177c907f00000000000000000000000000000000000000000000000000000000000000009061246f565b63ffffffff168163ffffffff16036117ef5760405162461bcd60e51b815260206004820152603060248201527f4d65726b6c6520747265652069732066756c6c2e204e6f206d6f7265206c656160448201526f1d995cc818d85b88189948185919195960821b6064820152608401610414565b60006117fc600283612484565b9050600061180a86866103b9565b905060008060015b7f000000000000000000000000000000000000000000000000000000000000000063ffffffff168163ffffffff1610156118d6576118516002866124a7565b63ffffffff1660000361188f578392506118708163ffffffff16610a2d565b63ffffffff8216600090815260208190526040902085905591506118ab565b63ffffffff811660009081526020819052604090205492508391505b6118b583836103b9565b93506118c2600286612484565b9450806118ce816124ca565b915050611812565b506002546000906064906118f19063ffffffff1660016124ed565b6118fb91906124a7565b6002805463ffffffff191663ffffffff8316908117825560009081526001602052604090208690559091506119319087906124ed565b6002805463ffffffff929092166401000000000267ffffffff0000000019909216919091179055509394505050505092915050565b60405180604001604052806002906020820280368337509192915050565b60405180604001604052806002905b61199b611966565b8152602001906001900390816119935790505090565b6000602082840312156119c357600080fd5b5035919050565b600080604083850312156119dd57600080fd5b50508035926020909101359150565b6000602082840312156119fe57600080fd5b813567ffffffffffffffff811115611a1557600080fd5b820160408185031215611a2757600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715611a6757611a67611a2e565b60405290565b604051610140810167ffffffffffffffff81118282101715611a6757611a67611a2e565b60405160e0810167ffffffffffffffff81118282101715611a6757611a67611a2e565b600082601f830112611ac557600080fd5b813567ffffffffffffffff80821115611ae057611ae0611a2e565b604051601f8301601f19908116603f01168101908282118183101715611b0857611b08611a2e565b81604052838152866020858801011115611b2157600080fd5b836020870160208301376000602085830101528094505050505092915050565b600060208284031215611b5357600080fd5b813567ffffffffffffffff811115611b6a57600080fd5b61052384828501611ab4565b8060005b6002811015611b99578151845260209384019390910190600101611b7a565b50505050565b806000805b6002808210611bb357506109c7565b835186845b83811015611bd6578251825260209283019290910190600101611bb8565b505050604095909501945060209290920191600101611ba4565b6101008101611bff8286611b76565b611c0c6040830185611b9f565b611c1960c0830184611b76565b949350505050565b634e487b7160e01b600052603260045260246000fd5b60408101818360005b6002811015611c5f578151835260209283019290910190600101611c40565b50505092915050565b600060208284031215611c7a57600080fd5b5051919050565b6000823561013e19833603018112611c9857600080fd5b9190910192915050565b80356001600160a01b038116811461107b57600080fd5b600060208284031215611ccb57600080fd5b611a2782611ca2565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff821680611d0057611d00611cd4565b6000190192915050565b6000823561011e19833603018112611c9857600080fd5b6000600160ff1b8201611d3657611d36611cd4565b5060000390565b6000808335601e19843603018112611d5457600080fd5b83018035915067ffffffffffffffff821115611d6f57600080fd5b602001915036819003821315611d8457600080fd5b9250929050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b038b811682528a81166020830152604082018a9052606082018990528781166080830152861660a082015261010060c08201819052600090611e008382018789611d8b565b905082810360e0840152611e15818587611d8b565b9d9c50505050505050505050505050565b600080600080600080600080610100898b031215611e4357600080fd5b505086516020880151604089015160608a015160808b015160a08c015160c08d015160e0909d0151959e949d50929b919a50985090965094509092509050565b600060018201611e9557611e95611cd4565b5060010190565b6000808335601e19843603018112611eb357600080fd5b830160208101925035905067ffffffffffffffff811115611ed357600080fd5b803603821315611d8457600080fd5b60208152611f0360208201611ef684611ca2565b6001600160a01b03169052565b602082013560408201526000611f1c6040840184611e9c565b610140806060860152611f3461016086018385611d8b565b9250611f436060870187611e9c565b9250601f1980878603016080880152611f5d858584611d8b565b9450611f6b60808901611ca2565b6001600160a01b03811660a0890152935060a088013560c0880152611f9260c08901611ca2565b6001600160a01b03811660e08901529350611faf60e08901611ca2565b93506101009150611fca828801856001600160a01b03169052565b611fd682890189611e9c565b94509150610120818887030181890152611ff1868685611d8b565b9550611fff818a018a611e9c565b955092505080878603018388015250612019848483611d8b565b979650505050505050565b634e487b7160e01b600052601260045260246000fd5b60008261204957612049612024565b500690565b600082601f83011261205f57600080fd5b612067611a44565b80604084018581111561207957600080fd5b845b8181101561209357803584526020938401930161207b565b509095945050505050565b600061014082840312156120b157600080fd5b6120b9611a6d565b90506120c482611ca2565b815260208201356020820152604082013567ffffffffffffffff808211156120eb57600080fd5b6120f785838601611ab4565b6040840152606084013591508082111561211057600080fd5b61211c85838601611ab4565b606084015261212d60808501611ca2565b608084015260a084013560a084015261214860c08501611ca2565b60c084015261215960e08501611ca2565b60e08401526101009150818401358181111561217457600080fd5b61218086828701611ab4565b83850152506101209150818401358181111561219b57600080fd5b6121a786828701611ab4565b8385015250505092915050565b6000604082360312156121c657600080fd5b6121ce611a44565b823567ffffffffffffffff808211156121e657600080fd5b818501915061012082360312156121fc57600080fd5b612204611a91565b82358281111561221357600080fd5b61221f36828601611ab4565b82525060208301356020820152612239366040850161204e565b604082015261224b366080850161204e565b606082015260c0830135608082015261226660e08401611ca2565b60a082015261010083013560c082015280845250602085013591508082111561228e57600080fd5b5061229b3682860161209e565b60208301525092915050565b63ffffffff8281168282160390808211156122c4576122c4611cd4565b5092915050565b602081526000611c19602083018486611d8b565b61022081016122ee8287611b76565b6122fb6040830186611b9f565b61230860c0830185611b76565b61010082018360005b6009811015612330578151835260209283019290910190600101612311565b50505095945050505050565b60006020828403121561234e57600080fd5b81518015158114611a2757600080fd5b600181815b8085111561239b578163ffffffff0482111561238157612381611cd4565b8085161561238e57918102915b93841c9390800290612363565b509250929050565b6000826123b257506001610527565b816123bf57506000610527565b81600181146123d557600281146123df57612410565b6001915050610527565b60ff8411156123f0576123f0611cd4565b6001841b915063ffffffff82111561240a5761240a611cd4565b50610527565b5060208310610133831016604e8410600b8410161715612447575081810a63ffffffff81111561244257612442611cd4565b610527565b612451838361235e565b8063ffffffff0482111561246757612467611cd4565b029392505050565b600063ffffffff6105238185168285166123a3565b600063ffffffff8084168061249b5761249b612024565b92169190910492915050565b600063ffffffff808416806124be576124be612024565b92169190910692915050565b600063ffffffff8083168181036124e3576124e3611cd4565b6001019392505050565b63ffffffff8181168382160190808211156122c4576122c4611cd456fe30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001a2646970667358221220bf431b69efa3dc0b5b0c10b634c38aed49da1d8de63282b14f99628b36fdff2764736f6c6343000812003360a060405234801561001057600080fd5b5060405161082238038061082283398101604081905261002f91610140565b60008263ffffffff16116100965760405162461bcd60e51b815260206004820152602360248201527f5f6c6576656c732073686f756c642062652067726561746572207468616e207a60448201526265726f60e81b60648201526084015b60405180910390fd5b60208263ffffffff16106100ec5760405162461bcd60e51b815260206004820152601e60248201527f5f6c6576656c732073686f756c64206265206c657373207468616e2033320000604482015260640161008d565b63ffffffff919091166080527f2fa27c5cf0185654d6dcf10df1b382324abdf62d73d395be1cc935ab470354f0600055600280546001600160a01b0319166001600160a01b0390921691909117905561018f565b6000806040838503121561015357600080fd5b825163ffffffff8116811461016757600080fd5b60208401519092506001600160a01b038116811461018457600080fd5b809150509250929050565b6080516106796101a9600039600060b101526106796000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806309ab9953146100675780632b7ac3f31461007c5780634ecf518b146100ac578063793deea3146100e8578063ebf0c7171461010a578063f4690d3114610121575b600080fd5b61007a610075366004610353565b610154565b005b60025461008f906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100d37f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff90911681526020016100a3565b6100fb6100f63660046103b3565b610213565b6040516100a3939291906104e5565b61011360005481565b6040519081526020016100a3565b61014461012f366004610516565b60016020526000908152604090205460ff1681565b60405190151581526020016100a3565b604080518082018252602080850135825291840135918101919091526101b961017d848061052f565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250859250610272915050565b5060408381013560009081558381526001602081815291839020805460ff1916909117905590518381527f0f5fe8e5ef2da61c43c2ba07a05ee5225f5d5a6c6ad4c274f1ed94748d2fedcf910160405180910390a1505050565b61021b610308565b610223610326565b61022b610308565b8380602001905181019061023f919061057d565b895160208b8101518b820193909352928a5281830193909352929092528082019290925291905285015283529193909250565b60008060008061028186610213565b600254604051637ae4eb4f60e11b815293965091945092506001600160a01b03169063f5c9d69e906102bd908690869086908b906004016105da565b602060405180830381865afa1580156102da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102fe919061061a565b9695505050505050565b60405180604001604052806002906020820280368337509192915050565b60405180604001604052806002905b61033d610308565b8152602001906001900390816103355790505090565b6000806040838503121561036657600080fd5b823567ffffffffffffffff81111561037d57600080fd5b83016060818603121561038f57600080fd5b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156103c557600080fd5b813567ffffffffffffffff808211156103dd57600080fd5b818401915084601f8301126103f157600080fd5b8135818111156104035761040361039d565b604051601f8201601f19908116603f0116810190838211818310171561042b5761042b61039d565b8160405282815287602084870101111561044457600080fd5b826020860160208301376000928101602001929092525095945050505050565b8060005b6002811015610487578151845260209384019390910190600101610468565b50505050565b806000805b60028082106104a157506104de565b835186845b838110156104c45782518252602092830192909101906001016104a6565b505050604095909501945060209290920191600101610492565b5050505050565b61010081016104f48286610464565b610501604083018561048d565b61050e60c0830184610464565b949350505050565b60006020828403121561052857600080fd5b5035919050565b6000808335601e1984360301811261054657600080fd5b83018035915067ffffffffffffffff82111561056157600080fd5b60200191503681900382131561057657600080fd5b9250929050565b600080600080600080600080610100898b03121561059a57600080fd5b505086516020880151604089015160608a015160808b015160a08c015160c08d015160e0909d0151959e949d50929b919a50985090965094509092509050565b61014081016105e98287610464565b6105f6604083018661048d565b61060360c0830185610464565b610611610100830184610464565b95945050505050565b60006020828403121561062c57600080fd5b8151801515811461063c57600080fd5b939250505056fea2646970667358221220ae81d53f2a56399de75ff1adc1e0034ca15a60018f4794483745eae54b1768a564736f6c63430008120033";

type ShieldedPoolWithBlocklistConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ShieldedPoolWithBlocklistConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ShieldedPoolWithBlocklist__factory extends ContractFactory {
  constructor(...args: ShieldedPoolWithBlocklistConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _levels: PromiseOrValue<BigNumberish>,
    _hasher: PromiseOrValue<string>,
    _transactionVerifier: PromiseOrValue<string>,
    _blocklistVerifier: PromiseOrValue<string>,
    _swapExecutor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ShieldedPoolWithBlocklist> {
    return super.deploy(
      _levels,
      _hasher,
      _transactionVerifier,
      _blocklistVerifier,
      _swapExecutor,
      overrides || {}
    ) as Promise<ShieldedPoolWithBlocklist>;
  }
  override getDeployTransaction(
    _levels: PromiseOrValue<BigNumberish>,
    _hasher: PromiseOrValue<string>,
    _transactionVerifier: PromiseOrValue<string>,
    _blocklistVerifier: PromiseOrValue<string>,
    _swapExecutor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _levels,
      _hasher,
      _transactionVerifier,
      _blocklistVerifier,
      _swapExecutor,
      overrides || {}
    );
  }
  override attach(address: string): ShieldedPoolWithBlocklist {
    return super.attach(address) as ShieldedPoolWithBlocklist;
  }
  override connect(signer: Signer): ShieldedPoolWithBlocklist__factory {
    return super.connect(signer) as ShieldedPoolWithBlocklist__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ShieldedPoolWithBlocklistInterface {
    return new utils.Interface(_abi) as ShieldedPoolWithBlocklistInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ShieldedPoolWithBlocklist {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ShieldedPoolWithBlocklist;
  }
}
