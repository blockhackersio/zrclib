/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  CompliantShieldedPool,
  CompliantShieldedPoolInterface,
} from "../../contracts/CompliantShieldedPool";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_hasher",
        type: "address",
      },
      {
        internalType: "address",
        name: "_transactionVerifier",
        type: "address",
      },
      {
        internalType: "address",
        name: "_blocklistVerifier",
        type: "address",
      },
      {
        internalType: "address",
        name: "_swapExecutor",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "commitment",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "encryptedOutput",
        type: "bytes",
      },
    ],
    name: "NewCommitment",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "nullifier",
        type: "bytes32",
      },
    ],
    name: "NewNullifier",
    type: "event",
  },
  {
    inputs: [],
    name: "FIELD_SIZE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MAX_EXT_AMOUNT",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ROOT_HISTORY_SIZE",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ZERO_VALUE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "blocklistTree",
    outputs: [
      {
        internalType: "contract MerkleTreeForBlocklist",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "currentRootIndex",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "filledSubtrees",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_left",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "_right",
        type: "bytes32",
      },
    ],
    name: "hashLeftRight",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "hasher",
    outputs: [
      {
        internalType: "contract IHasher",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_root",
        type: "bytes32",
      },
    ],
    name: "isKnownRoot",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_nullifierHash",
        type: "bytes32",
      },
    ],
    name: "isSpent",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "levels",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nextIndex",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "nullifierHashes",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "parseProof",
    outputs: [
      {
        internalType: "uint256[2]",
        name: "a",
        type: "uint256[2]",
      },
      {
        internalType: "uint256[2][2]",
        name: "b",
        type: "uint256[2][2]",
      },
      {
        internalType: "uint256[2]",
        name: "c",
        type: "uint256[2]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "roots",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "swapExecutor",
    outputs: [
      {
        internalType: "contract SwapExecutor",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "bytes",
                name: "proof",
                type: "bytes",
              },
              {
                internalType: "bytes32",
                name: "root",
                type: "bytes32",
              },
              {
                internalType: "bytes32[2]",
                name: "inputNullifiers",
                type: "bytes32[2]",
              },
              {
                internalType: "bytes32[2]",
                name: "outputCommitments",
                type: "bytes32[2]",
              },
              {
                internalType: "uint256",
                name: "publicAmount",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "publicAsset",
                type: "address",
              },
              {
                internalType: "bytes32",
                name: "extDataHash",
                type: "bytes32",
              },
            ],
            internalType: "struct AbstractShieldedPool.ProofArguments",
            name: "proofArguments",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "address",
                name: "recipient",
                type: "address",
              },
              {
                internalType: "int256",
                name: "extAmount",
                type: "int256",
              },
              {
                internalType: "bytes",
                name: "encryptedOutput1",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "encryptedOutput2",
                type: "bytes",
              },
              {
                internalType: "address",
                name: "tokenOut",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amountOutMin",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "swapRecipient",
                type: "address",
              },
              {
                internalType: "address",
                name: "swapRouter",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "swapData",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "transactData",
                type: "bytes",
              },
            ],
            internalType: "struct AbstractShieldedPool.ExtData",
            name: "extData",
            type: "tuple",
          },
        ],
        internalType: "struct AbstractShieldedPool.Proof",
        name: "_proof",
        type: "tuple",
      },
    ],
    name: "transact",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "bytes",
                name: "proof",
                type: "bytes",
              },
              {
                internalType: "bytes32",
                name: "root",
                type: "bytes32",
              },
              {
                internalType: "bytes32[2]",
                name: "inputNullifiers",
                type: "bytes32[2]",
              },
              {
                internalType: "bytes32[2]",
                name: "outputCommitments",
                type: "bytes32[2]",
              },
              {
                internalType: "uint256",
                name: "publicAmount",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "publicAsset",
                type: "address",
              },
              {
                internalType: "bytes32",
                name: "extDataHash",
                type: "bytes32",
              },
            ],
            internalType: "struct AbstractShieldedPool.ProofArguments",
            name: "proofArguments",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "address",
                name: "recipient",
                type: "address",
              },
              {
                internalType: "int256",
                name: "extAmount",
                type: "int256",
              },
              {
                internalType: "bytes",
                name: "encryptedOutput1",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "encryptedOutput2",
                type: "bytes",
              },
              {
                internalType: "address",
                name: "tokenOut",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amountOutMin",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "swapRecipient",
                type: "address",
              },
              {
                internalType: "address",
                name: "swapRouter",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "swapData",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "transactData",
                type: "bytes",
              },
            ],
            internalType: "struct AbstractShieldedPool.ExtData",
            name: "extData",
            type: "tuple",
          },
        ],
        internalType: "struct AbstractShieldedPool.Proof",
        name: "_proof",
        type: "tuple",
      },
    ],
    name: "transactAndSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "verifier",
    outputs: [
      {
        internalType: "contract CompliantVerifier",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "i",
        type: "uint256",
      },
    ],
    name: "zeros",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c0604052600280546001600160401b0319169055600160f81b6003553480156200002957600080fd5b5060405162003ab138038062003ab18339810160408190526200004c91620008bd565b600584848484848462000063565b60405180910390fd5b60208263ffffffff1610620000bb5760405162461bcd60e51b815260206004820152601e60248201527f5f6c6576656c732073686f756c64206265206c657373207468616e203332000060448201526064016200005a565b63ffffffff90911660a0526001600160a01b03908116608052600780548583166001600160a01b0319918216179091556005805492841692909116919091179055604051859083906200010e9062000897565b63ffffffff90921682526001600160a01b03166020820152604001604051809103906000f08015801562000146573d6000803e3d6000fd5b50600680546001600160a01b0319166001600160a01b03929092169190911790556200017162000180565b5050505050505050506200094c565b60005b60a05163ffffffff168163ffffffff161015620001d657620001ab63ffffffff821662000218565b63ffffffff821660009081526020819052604090205580620001cd816200091a565b91505062000183565b5060a051620001eb9063ffffffff1662000218565b6000805260016020527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb4955565b6000816000036200024a57507f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c919050565b816001036200027a57507f13e37f2d6cb86c78ccc1788607c2b199788c6bb0a615a21f2e7a8e88384222f8919050565b81600203620002aa57507f217126fa352c326896e8c2803eec8fd63ad50cf65edfef27a41a9e32dc622765919050565b81600303620002da57507f0e28a61a9b3e91007d5a9e3ada18e1b24d6d230c618388ee5df34cacd7397eee919050565b816004036200030a57507f27953447a6979839536badc5425ed15fadb0e292e9bc36f92f0aa5cfa5013587919050565b816005036200033a57507f194191edbfb91d10f6a7afd315f33095410c7801c47175c2df6dc2cce0e3affc919050565b816006036200036a57507f1733dece17d71190516dbaf1927936fa643dc7079fc0cc731de9d6845a47741f919050565b816007036200039a57507f267855a7dc75db39d81d17f95d0a7aa572bf5ae19f4db0e84221d2b2ef999219919050565b81600803620003ca57507f1184e11836b4c36ad8238a340ecc0985eeba665327e33e9b0e3641027c27620d919050565b81600903620003fa57507f0702ab83a135d7f55350ab1bfaa90babd8fc1d2b3e6a7215381a7b2213d6c5ce919050565b81600a036200042a57507f2eecc0de814cfd8c57ce882babb2e30d1da56621aef7a47f3291cffeaec26ad7919050565b81600b036200045a57507f280bc02145c155d5833585b6c7b08501055157dd30ce005319621dc462d33b47919050565b81600c036200048a57507f045132221d1fa0a7f4aed8acd2cbec1e2189b7732ccb2ec272b9c60f0d5afc5b919050565b81600d03620004ba57507f27f427ccbf58a44b1270abbe4eda6ba53bd6ac4d88cf1e00a13c4371ce71d366919050565b81600e03620004ea57507f1617eaae5064f26e8f8a6493ae92bfded7fde71b65df1ca6d5dcec0df70b2cef919050565b81600f036200051a57507f20c6b400d0ea1b15435703c31c31ee63ad7ba5c8da66cec2796feacea575abca919050565b816010036200054a57507f09589ddb438723f53a8e57bdada7c5f8ed67e8fece3889a73618732965645eec919050565b816011036200057957507e64b6a738a5ff537db7b220f3394f0ecbd35bfd355c5425dc1166bf3236079b919050565b81601203620005a957507f095de56281b1d5055e897c3574ff790d5ee81dbc5df784ad2d67795e557c9e9f919050565b81601303620005d957507f11cf2e2887aa21963a6ec14289183efe4d4c60f14ecd3d6fe0beebdf855a9b63919050565b816014036200060957507f2b0f6fc0179fa65b6f73627c0e1e84c7374d2eaec44c9a48f2571393ea77bcbb919050565b816015036200063957507f16fdb637c2abf9c0f988dbf2fd64258c46fb6a273d537b2cf1603ea460b13279919050565b816016036200066957507f21bbd7e944f6124dad4c376df9cc12e7ca66e47dff703ff7cedb1a454edcf0ff919050565b816017036200069957507f2784f8220b1c963e468f590f137baaa1625b3b92a27ad9b6e84eb0d3454d9962919050565b81601803620006c957507f16ace1a65b7534142f8cc1aad810b3d6a7a74ca905d9c275cb98ba57e509fc10919050565b81601903620006f957507f2328068c6a8c24265124debd8fe10d3f29f0665ea725a65e3638f6192a96a013919050565b81601a036200072957507f2ddb991be1f028022411b4c4d2c22043e5e751c120736f00adf54acab1c9ac14919050565b81601b036200075957507f0113798410eaeb95056a464f70521eb58377c0155f2fe518a5594d38cc209cc0919050565b81601c036200078957507f202d1ae61526f0d0d01ef80fb5d4055a7af45721024c2c24cffd6a3798f54d50919050565b81601d03620007b957507f23ab323453748129f2765f79615022f5bebd6f4096a796300aab049a60b0f187919050565b81601e03620007e957507f1f15585f8947e378bcf8bd918716799da909acdb944c57150b1eb4565fda8aa0919050565b81601f036200081957507f1eb064b21055ac6a350cf41eb30e4ce2cb19680217df3a243617c2838185ad06919050565b816020036200084957507f25a90efc49af54a5b7154a6eaba978dcf04796b4984fe54be8d4ea8579e1f1e6919050565b60405162461bcd60e51b815260206004820152601360248201527f496e646578206f7574206f6620626f756e64730000000000000000000000000060448201526064016200005a565b919050565b610822806200328f83390190565b80516001600160a01b03811681146200089257600080fd5b60008060008060808587031215620008d457600080fd5b620008df85620008a5565b9350620008ef60208601620008a5565b9250620008ff60408601620008a5565b91506200090f60608601620008a5565b905092959194509250565b600063ffffffff8083168181036200094257634e487b7160e01b600052601160045260246000fd5b6001019392505050565b60805160a05161290862000987600039600081816101f801528181611a840152611b4101526000818161035f01526104a501526129086000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c806384fcec46116100b8578063e5285dcc1161007c578063e5285dcc146102fd578063e829558814610320578063ec73295914610333578063ed33639f1461035a578063f178e47c14610381578063fc7e9c6f146103a157600080fd5b806384fcec461461029557806390eeb02b146102a8578063ba70f757146102b8578063c2b40ae4146102d5578063cd87a3b4146102f557600080fd5b80634ecf518b1161010a5780634ecf518b146101f3578063622743291461022f5780636d9833e31461024457806375d8498f14610257578063793deea31461026a5780637fe24ffe1461028c57600080fd5b806317cc915c146101475780632b7ac3f31461017f5780632c876da2146101aa57806338bf282e146101bd578063414a37ba146101de575b600080fd5b61016a610155366004611cde565b60046020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b600754610192906001600160a01b031681565b6040516001600160a01b039091168152602001610176565b600654610192906001600160a01b031681565b6101d06101cb366004611cf7565b6103b9565b604051908152602001610176565b6101d06000805160206128b383398151915281565b61021a7f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff9091168152602001610176565b61024261023d366004611d19565b61052d565b005b61016a610252366004611cde565b61078e565b610242610265366004611d19565b61080c565b61027d610278366004611e6e565b610947565b60405161017693929190611f1d565b6101d060035481565b600554610192906001600160a01b031681565b60025461021a9063ffffffff1681565b60025463ffffffff166000908152600160205260409020546101d0565b6101d06102e3366004611cde565b60016020526000908152604090205481565b61021a606481565b61016a61030b366004611cde565b60009081526004602052604090205460ff1690565b6101d061032e366004611cde565b6109a6565b6101d07f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c81565b6101927f000000000000000000000000000000000000000000000000000000000000000081565b6101d061038f366004611cde565b60006020819052908152604090205481565b60025461021a90640100000000900463ffffffff1681565b60006000805160206128b3833981519152831061041d5760405162461bcd60e51b815260206004820181905260248201527f5f6c6566742073686f756c6420626520696e7369646520746865206669656c6460448201526064015b60405180910390fd5b6000805160206128b383398151915282106104845760405162461bcd60e51b815260206004820152602160248201527f5f72696768742073686f756c6420626520696e7369646520746865206669656c6044820152601960fa1b6064820152608401610414565b61048c611c93565b8381526020810183905260405163014cf2b360e51b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063299e5660906104e2908490600401611f64565b602060405180830381865afa1580156104ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105239190611f95565b9150505b92915050565b6005546001600160a01b03166105466020830183611fae565b610554906020810190611fe6565b6001600160a01b03160361057a5760405162461bcd60e51b815260040161041490612001565b60006105896020830183611fae565b60200135131561065057600061059f8280612045565b6105b19061010081019060e001611fe6565b90506001600160a01b0381166323b872dd33306105d16020870187611fae565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526020013560448201526064016020604051808303816000875af1158015610629573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064d919061205c565b50505b61065981610ff9565b60006106686020830183611fae565b60200135121561078b5760006106816020830183611fae565b61068f906020810190611fe6565b6001600160a01b0316036106b55760405162461bcd60e51b81526004016104149061207e565b60006106c18280612045565b6106d39061010081019060e001611fe6565b90506001600160a01b03811663a9059cbb6106f16020850185611fae565b6106ff906020810190611fe6565b61070c6020860186611fae565b60200135610719906120cb565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610764573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610788919061205c565b50505b50565b600081810361079f57506000919050565b60025463ffffffff16805b63ffffffff811660009081526001602052604090205484036107d0575060019392505050565b8063ffffffff166000036107e2575060645b806107ec816120e7565b9150508163ffffffff168163ffffffff16036107aa575060009392505050565b600061081b6020830183611fae565b60200135121561093e5760006108346020830183611fae565b610842906020810190611fe6565b6001600160a01b0316036108685760405162461bcd60e51b81526004016104149061207e565b60006108748280612045565b6108869061010081019060e001611fe6565b90506001600160a01b03811663a9059cbb6108a46020850185611fae565b6108b2906020810190611fe6565b6108bf6020860186611fae565b602001356108cc906120cb565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610917573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093b919061205c565b50505b61078b8161104f565b61094f611c93565b610957611cb1565b61095f611c93565b838060200190518101906109739190612107565b895160208b8101518b820193909352928a5281830193909352929092528082019290925291905285015283529193909250565b6000816000036109d757507f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c919050565b81600103610a0657507f13e37f2d6cb86c78ccc1788607c2b199788c6bb0a615a21f2e7a8e88384222f8919050565b81600203610a3557507f217126fa352c326896e8c2803eec8fd63ad50cf65edfef27a41a9e32dc622765919050565b81600303610a6457507f0e28a61a9b3e91007d5a9e3ada18e1b24d6d230c618388ee5df34cacd7397eee919050565b81600403610a9357507f27953447a6979839536badc5425ed15fadb0e292e9bc36f92f0aa5cfa5013587919050565b81600503610ac257507f194191edbfb91d10f6a7afd315f33095410c7801c47175c2df6dc2cce0e3affc919050565b81600603610af157507f1733dece17d71190516dbaf1927936fa643dc7079fc0cc731de9d6845a47741f919050565b81600703610b2057507f267855a7dc75db39d81d17f95d0a7aa572bf5ae19f4db0e84221d2b2ef999219919050565b81600803610b4f57507f1184e11836b4c36ad8238a340ecc0985eeba665327e33e9b0e3641027c27620d919050565b81600903610b7e57507f0702ab83a135d7f55350ab1bfaa90babd8fc1d2b3e6a7215381a7b2213d6c5ce919050565b81600a03610bad57507f2eecc0de814cfd8c57ce882babb2e30d1da56621aef7a47f3291cffeaec26ad7919050565b81600b03610bdc57507f280bc02145c155d5833585b6c7b08501055157dd30ce005319621dc462d33b47919050565b81600c03610c0b57507f045132221d1fa0a7f4aed8acd2cbec1e2189b7732ccb2ec272b9c60f0d5afc5b919050565b81600d03610c3a57507f27f427ccbf58a44b1270abbe4eda6ba53bd6ac4d88cf1e00a13c4371ce71d366919050565b81600e03610c6957507f1617eaae5064f26e8f8a6493ae92bfded7fde71b65df1ca6d5dcec0df70b2cef919050565b81600f03610c9857507f20c6b400d0ea1b15435703c31c31ee63ad7ba5c8da66cec2796feacea575abca919050565b81601003610cc757507f09589ddb438723f53a8e57bdada7c5f8ed67e8fece3889a73618732965645eec919050565b81601103610cf557507e64b6a738a5ff537db7b220f3394f0ecbd35bfd355c5425dc1166bf3236079b919050565b81601203610d2457507f095de56281b1d5055e897c3574ff790d5ee81dbc5df784ad2d67795e557c9e9f919050565b81601303610d5357507f11cf2e2887aa21963a6ec14289183efe4d4c60f14ecd3d6fe0beebdf855a9b63919050565b81601403610d8257507f2b0f6fc0179fa65b6f73627c0e1e84c7374d2eaec44c9a48f2571393ea77bcbb919050565b81601503610db157507f16fdb637c2abf9c0f988dbf2fd64258c46fb6a273d537b2cf1603ea460b13279919050565b81601603610de057507f21bbd7e944f6124dad4c376df9cc12e7ca66e47dff703ff7cedb1a454edcf0ff919050565b81601703610e0f57507f2784f8220b1c963e468f590f137baaa1625b3b92a27ad9b6e84eb0d3454d9962919050565b81601803610e3e57507f16ace1a65b7534142f8cc1aad810b3d6a7a74ca905d9c275cb98ba57e509fc10919050565b81601903610e6d57507f2328068c6a8c24265124debd8fe10d3f29f0665ea725a65e3638f6192a96a013919050565b81601a03610e9c57507f2ddb991be1f028022411b4c4d2c22043e5e751c120736f00adf54acab1c9ac14919050565b81601b03610ecb57507f0113798410eaeb95056a464f70521eb58377c0155f2fe518a5594d38cc209cc0919050565b81601c03610efa57507f202d1ae61526f0d0d01ef80fb5d4055a7af45721024c2c24cffd6a3798f54d50919050565b81601d03610f2957507f23ab323453748129f2765f79615022f5bebd6f4096a796300aab049a60b0f187919050565b81601e03610f5857507f1f15585f8947e378bcf8bd918716799da909acdb944c57150b1eb4565fda8aa0919050565b81601f03610f8757507f1eb064b21055ac6a350cf41eb30e4ce2cb19680217df3a243617c2838185ad06919050565b81602003610fb657507f25a90efc49af54a5b7154a6eaba978dcf04796b4984fe54be8d4ea8579e1f1e6919050565b60405162461bcd60e51b8152602060048201526013602482015272496e646578206f7574206f6620626f756e647360681b6044820152606401610414565b919050565b6005546001600160a01b03166110126020830183611fae565b611020906020810190611fe6565b6001600160a01b0316036110465760405162461bcd60e51b815260040161041490612001565b61078b816113dd565b600061105e6020830183611fae565b60200135126110af5760405162461bcd60e51b815260206004820152601c60248201527f657874416d6f756e742073686f756c64206265206e65676174697665000000006044820152606401610414565b60006110bb8280612045565b6110cd9061010081019060e001611fe6565b6001600160a01b0316036111235760405162461bcd60e51b815260206004820152601d60248201527f7075626c696341737365742073686f756c64206e6f74206265203078300000006044820152606401610414565b61112c816113dd565b6005546001600160a01b03166111456020830183611fae565b611153906020810190611fe6565b6001600160a01b0316146111b45760405162461bcd60e51b815260206004820152602260248201527f6f6e6c7920737761704578656375746f722063616e20626520726563697069656044820152611b9d60f21b6064820152608401610414565b60006111c36020830183611fae565b6111d49060a0810190608001611fe6565b6001600160a01b03160361122a5760405162461bcd60e51b815260206004820152601a60248201527f746f6b656e4f75742073686f756c64206e6f74206265203078300000000000006044820152606401610414565b60006112396020830183611fae565b60a00135116112985760405162461bcd60e51b815260206004820152602560248201527f616d6f756e744f75744d696e2073686f756c6420626520677265617465722074604482015264068616e20360dc1b6064820152608401610414565b6005546001600160a01b031663a0c6a6ef6112b38380612045565b6112c59061010081019060e001611fe6565b6112d26020850185611fae565b6112e39060a0810190608001611fe6565b6112f06020860186611fae565b602001356112fd906120cb565b61130a6020870187611fae565b60a0013561131b6020880188611fae565b61132d9061010081019060e001611fe6565b61133a6020890189611fae565b61134b9060e081019060c001611fe6565b61135860208a018a611fae565b61136790610100810190612164565b61137460208c018c611fae565b61138390610120810190612164565b6040518b63ffffffff1660e01b81526004016113a89a999897969594939291906121db565b600060405180830381600087803b1580156113c257600080fd5b505af11580156113d6573d6000803e3d6000fd5b5050505050565b6113f36113ea8280612045565b6020013561078e565b6114355760405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a59081b595c9adb19481c9bdbdd606a1b6044820152606401610414565b60005b6114428280612045565b5060028110156114df576114876114598380612045565b604001826002811061146d5761146d611f4e565b602002013560009081526004602052604090205460ff1690565b156114cd5760405162461bcd60e51b8152602060048201526016602482015275125b9c1d5d081a5cc8185b1c9958591e481cdc195b9d60521b6044820152606401610414565b806114d78161224d565b915050611438565b506000805160206128b38339815191526114fc6020830183611fae565b60405160200161150c91906122ac565b6040516020818303038152906040528051906020012060001c61152f9190612404565b6115398280612045565b61010001351461158b5760405162461bcd60e51b815260206004820152601c60248201527f496e636f72726563742065787465726e616c20646174612068617368000000006044820152606401610414565b600354611597906120cb565b6115a46020830183611fae565b602001351380156115c657506003546115c06020830183611fae565b60200135125b61160a5760405162461bcd60e51b8152602060048201526015602482015274125b9d985b1a59081c1d589b1a58c8185b5bdd5b9d605a1b6044820152606401610414565b61161b6116168261257e565b6118d2565b6116575760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b210383937b7b360991b6044820152606401610414565b60005b6116648280612045565b5060028110156116cf5760016004600061167e8580612045565b604001846002811061169257611692611f4e565b6020020135815260200190815260200160002060006101000a81548160ff02191690831515021790555080806116c79061224d565b91505061165a565b5060006116df6020830183611fae565b60200135121561172c5760006116f86020830183611fae565b611706906020810190611fe6565b6001600160a01b03160361172c5760405162461bcd60e51b81526004016104149061207e565b6117506117398280612045565b608001356117478380612045565b60a00135611a67565b506002805461176d9190640100000000900463ffffffff16612671565b63ffffffff1661177d8280612045565b608001357ff3843eddcfcac65d12d9f26261dab50671fdbf5dc44441816c8bbdace2411afd6117af6020850185611fae565b6117bd906040810190612164565b6040516117cb929190612695565b60405180910390a36002546117f090600190640100000000900463ffffffff16612671565b63ffffffff166118008280612045565b60a001357ff3843eddcfcac65d12d9f26261dab50671fdbf5dc44441816c8bbdace2411afd6118326020850185611fae565b611840906060810190612164565b60405161184e929190612695565b60405180910390a360005b6118638280612045565b5060028110156118ce576118778280612045565b604001816002811061188b5761188b611f4e565b60200201357f5e58f77bbf94b46d8d896e29753e4458c6e59b48581e20ed58c9558e96f297ce60405160405180910390a2806118c68161224d565b915050611859565b5050565b604080516101208101825282516020908101518252600654835163ebf0c71760e01b81529351600094859493808501936001600160a01b03169263ebf0c7179260048082019392918290030181865afa158015611933573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119579190611f95565b81528451608090810151602080840191909152865160a0908101516001600160a01b0316604080860191909152885160c0908101516060808801919091528a5183015151958701959095528951909101518301519185019190915287518301515190840152865190910151015160e090910152835151909150600090819081906119e090610947565b60075460405163c542c93b60e01b815293965091945092506001600160a01b03169063c542c93b90611a1c908690869086908a906004016126a9565b602060405180830381865afa158015611a39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a5d919061205c565b9695505050505050565b6002805460009164010000000090910463ffffffff1690611aa9907f000000000000000000000000000000000000000000000000000000000000000090612817565b63ffffffff168163ffffffff1603611b1c5760405162461bcd60e51b815260206004820152603060248201527f4d65726b6c6520747265652069732066756c6c2e204e6f206d6f7265206c656160448201526f1d995cc818d85b88189948185919195960821b6064820152608401610414565b6000611b2960028361282c565b90506000611b3786866103b9565b905060008060015b7f000000000000000000000000000000000000000000000000000000000000000063ffffffff168163ffffffff161015611c0357611b7e60028661284f565b63ffffffff16600003611bbc57839250611b9d8163ffffffff166109a6565b63ffffffff821660009081526020819052604090208590559150611bd8565b63ffffffff811660009081526020819052604090205492508391505b611be283836103b9565b9350611bef60028661282c565b945080611bfb81612872565b915050611b3f565b50600254600090606490611c1e9063ffffffff166001612895565b611c28919061284f565b6002805463ffffffff191663ffffffff831690811782556000908152600160205260409020869055909150611c5e908790612895565b6002805463ffffffff929092166401000000000267ffffffff0000000019909216919091179055509394505050505092915050565b60405180604001604052806002906020820280368337509192915050565b60405180604001604052806002905b611cc8611c93565b815260200190600190039081611cc05790505090565b600060208284031215611cf057600080fd5b5035919050565b60008060408385031215611d0a57600080fd5b50508035926020909101359150565b600060208284031215611d2b57600080fd5b813567ffffffffffffffff811115611d4257600080fd5b820160408185031215611d5457600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715611d9457611d94611d5b565b60405290565b604051610140810167ffffffffffffffff81118282101715611d9457611d94611d5b565b60405160e0810167ffffffffffffffff81118282101715611d9457611d94611d5b565b600082601f830112611df257600080fd5b813567ffffffffffffffff80821115611e0d57611e0d611d5b565b604051601f8301601f19908116603f01168101908282118183101715611e3557611e35611d5b565b81604052838152866020858801011115611e4e57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600060208284031215611e8057600080fd5b813567ffffffffffffffff811115611e9757600080fd5b61052384828501611de1565b8060005b6002811015611ec6578151845260209384019390910190600101611ea7565b50505050565b806000805b6002808210611ee057506113d6565b835186845b83811015611f03578251825260209283019290910190600101611ee5565b505050604095909501945060209290920191600101611ed1565b6101008101611f2c8286611ea3565b611f396040830185611ecc565b611f4660c0830184611ea3565b949350505050565b634e487b7160e01b600052603260045260246000fd5b60408101818360005b6002811015611f8c578151835260209283019290910190600101611f6d565b50505092915050565b600060208284031215611fa757600080fd5b5051919050565b6000823561013e19833603018112611fc557600080fd5b9190910192915050565b80356001600160a01b0381168114610ff457600080fd5b600060208284031215611ff857600080fd5b611d5482611fcf565b60208082526024908201527f726563697069656e742073686f756c64206e6f742062652073776170457865636040820152633aba37b960e11b606082015260800190565b6000823561011e19833603018112611fc557600080fd5b60006020828403121561206e57600080fd5b81518015158114611d5457600080fd5b6020808252601e908201527f43616e277420776974686472617720746f207a65726f20616464726573730000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000600160ff1b82016120e0576120e06120b5565b5060000390565b600063ffffffff8216806120fd576120fd6120b5565b6000190192915050565b600080600080600080600080610100898b03121561212457600080fd5b505086516020880151604089015160608a015160808b015160a08c015160c08d015160e0909d0151959e949d50929b919a50985090965094509092509050565b6000808335601e1984360301811261217b57600080fd5b83018035915067ffffffffffffffff82111561219657600080fd5b6020019150368190038213156121ab57600080fd5b9250929050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b038b811682528a81166020830152604082018a9052606082018990528781166080830152861660a082015261010060c0820181905260009061222783820187896121b2565b905082810360e084015261223c8185876121b2565b9d9c50505050505050505050505050565b60006001820161225f5761225f6120b5565b5060010190565b6000808335601e1984360301811261227d57600080fd5b830160208101925035905067ffffffffffffffff81111561229d57600080fd5b8036038213156121ab57600080fd5b602081526122cd602082016122c084611fcf565b6001600160a01b03169052565b6020820135604082015260006122e66040840184612266565b6101408060608601526122fe610160860183856121b2565b925061230d6060870187612266565b9250601f19808786030160808801526123278585846121b2565b945061233560808901611fcf565b6001600160a01b03811660a0890152935060a088013560c088015261235c60c08901611fcf565b6001600160a01b03811660e0890152935061237960e08901611fcf565b93506101009150612394828801856001600160a01b03169052565b6123a082890189612266565b945091506101208188870301818901526123bb8686856121b2565b95506123c9818a018a612266565b9550925050808786030183880152506123e38484836121b2565b979650505050505050565b634e487b7160e01b600052601260045260246000fd5b600082612413576124136123ee565b500690565b600082601f83011261242957600080fd5b612431611d71565b80604084018581111561244357600080fd5b845b8181101561245d578035845260209384019301612445565b509095945050505050565b6000610140828403121561247b57600080fd5b612483611d9a565b905061248e82611fcf565b815260208201356020820152604082013567ffffffffffffffff808211156124b557600080fd5b6124c185838601611de1565b604084015260608401359150808211156124da57600080fd5b6124e685838601611de1565b60608401526124f760808501611fcf565b608084015260a084013560a084015261251260c08501611fcf565b60c084015261252360e08501611fcf565b60e08401526101009150818401358181111561253e57600080fd5b61254a86828701611de1565b83850152506101209150818401358181111561256557600080fd5b61257186828701611de1565b8385015250505092915050565b60006040823603121561259057600080fd5b612598611d71565b823567ffffffffffffffff808211156125b057600080fd5b818501915061012082360312156125c657600080fd5b6125ce611dbe565b8235828111156125dd57600080fd5b6125e936828601611de1565b825250602083013560208201526126033660408501612418565b60408201526126153660808501612418565b606082015260c0830135608082015261263060e08401611fcf565b60a082015261010083013560c082015280845250602085013591508082111561265857600080fd5b5061266536828601612468565b60208301525092915050565b63ffffffff82811682821603908082111561268e5761268e6120b5565b5092915050565b602081526000611f466020830184866121b2565b61022081016126b88287611ea3565b6126c56040830186611ecc565b6126d260c0830185611ea3565b61010082018360005b60098110156126fa5781518352602092830192909101906001016126db565b50505095945050505050565b600181815b80851115612743578163ffffffff04821115612729576127296120b5565b8085161561273657918102915b93841c939080029061270b565b509250929050565b60008261275a57506001610527565b8161276757506000610527565b816001811461277d5760028114612787576127b8565b6001915050610527565b60ff841115612798576127986120b5565b6001841b915063ffffffff8211156127b2576127b26120b5565b50610527565b5060208310610133831016604e8410600b84101617156127ef575081810a63ffffffff8111156127ea576127ea6120b5565b610527565b6127f98383612706565b8063ffffffff0482111561280f5761280f6120b5565b029392505050565b600063ffffffff61052381851682851661274b565b600063ffffffff80841680612843576128436123ee565b92169190910492915050565b600063ffffffff80841680612866576128666123ee565b92169190910692915050565b600063ffffffff80831681810361288b5761288b6120b5565b6001019392505050565b63ffffffff81811683821601908082111561268e5761268e6120b556fe30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001a2646970667358221220688b9a3fa46f137579e8d4093c2973e09654ec337f2357ed0bd2e744701c724c64736f6c6343000812003360a060405234801561001057600080fd5b5060405161082238038061082283398101604081905261002f91610140565b60008263ffffffff16116100965760405162461bcd60e51b815260206004820152602360248201527f5f6c6576656c732073686f756c642062652067726561746572207468616e207a60448201526265726f60e81b60648201526084015b60405180910390fd5b60208263ffffffff16106100ec5760405162461bcd60e51b815260206004820152601e60248201527f5f6c6576656c732073686f756c64206265206c657373207468616e2033320000604482015260640161008d565b63ffffffff919091166080527f2fa27c5cf0185654d6dcf10df1b382324abdf62d73d395be1cc935ab470354f0600055600280546001600160a01b0319166001600160a01b0390921691909117905561018f565b6000806040838503121561015357600080fd5b825163ffffffff8116811461016757600080fd5b60208401519092506001600160a01b038116811461018457600080fd5b809150509250929050565b6080516106796101a9600039600060b101526106796000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806309ab9953146100675780632b7ac3f31461007c5780634ecf518b146100ac578063793deea3146100e8578063ebf0c7171461010a578063f4690d3114610121575b600080fd5b61007a610075366004610353565b610154565b005b60025461008f906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100d37f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff90911681526020016100a3565b6100fb6100f63660046103b3565b610213565b6040516100a3939291906104e5565b61011360005481565b6040519081526020016100a3565b61014461012f366004610516565b60016020526000908152604090205460ff1681565b60405190151581526020016100a3565b604080518082018252602080850135825291840135918101919091526101b961017d848061052f565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250859250610272915050565b5060408381013560009081558381526001602081815291839020805460ff1916909117905590518381527f0f5fe8e5ef2da61c43c2ba07a05ee5225f5d5a6c6ad4c274f1ed94748d2fedcf910160405180910390a1505050565b61021b610308565b610223610326565b61022b610308565b8380602001905181019061023f919061057d565b895160208b8101518b820193909352928a5281830193909352929092528082019290925291905285015283529193909250565b60008060008061028186610213565b600254604051637ae4eb4f60e11b815293965091945092506001600160a01b03169063f5c9d69e906102bd908690869086908b906004016105da565b602060405180830381865afa1580156102da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102fe919061061a565b9695505050505050565b60405180604001604052806002906020820280368337509192915050565b60405180604001604052806002905b61033d610308565b8152602001906001900390816103355790505090565b6000806040838503121561036657600080fd5b823567ffffffffffffffff81111561037d57600080fd5b83016060818603121561038f57600080fd5b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156103c557600080fd5b813567ffffffffffffffff808211156103dd57600080fd5b818401915084601f8301126103f157600080fd5b8135818111156104035761040361039d565b604051601f8201601f19908116603f0116810190838211818310171561042b5761042b61039d565b8160405282815287602084870101111561044457600080fd5b826020860160208301376000928101602001929092525095945050505050565b8060005b6002811015610487578151845260209384019390910190600101610468565b50505050565b806000805b60028082106104a157506104de565b835186845b838110156104c45782518252602092830192909101906001016104a6565b505050604095909501945060209290920191600101610492565b5050505050565b61010081016104f48286610464565b610501604083018561048d565b61050e60c0830184610464565b949350505050565b60006020828403121561052857600080fd5b5035919050565b6000808335601e1984360301811261054657600080fd5b83018035915067ffffffffffffffff82111561056157600080fd5b60200191503681900382131561057657600080fd5b9250929050565b600080600080600080600080610100898b03121561059a57600080fd5b505086516020880151604089015160608a015160808b015160a08c015160c08d015160e0909d0151959e949d50929b919a50985090965094509092509050565b61014081016105e98287610464565b6105f6604083018661048d565b61060360c0830185610464565b610611610100830184610464565b95945050505050565b60006020828403121561062c57600080fd5b8151801515811461063c57600080fd5b939250505056fea2646970667358221220ae81d53f2a56399de75ff1adc1e0034ca15a60018f4794483745eae54b1768a564736f6c63430008120033";

type CompliantShieldedPoolConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CompliantShieldedPoolConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CompliantShieldedPool__factory extends ContractFactory {
  constructor(...args: CompliantShieldedPoolConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _hasher: PromiseOrValue<string>,
    _transactionVerifier: PromiseOrValue<string>,
    _blocklistVerifier: PromiseOrValue<string>,
    _swapExecutor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CompliantShieldedPool> {
    return super.deploy(
      _hasher,
      _transactionVerifier,
      _blocklistVerifier,
      _swapExecutor,
      overrides || {}
    ) as Promise<CompliantShieldedPool>;
  }
  override getDeployTransaction(
    _hasher: PromiseOrValue<string>,
    _transactionVerifier: PromiseOrValue<string>,
    _blocklistVerifier: PromiseOrValue<string>,
    _swapExecutor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _hasher,
      _transactionVerifier,
      _blocklistVerifier,
      _swapExecutor,
      overrides || {}
    );
  }
  override attach(address: string): CompliantShieldedPool {
    return super.attach(address) as CompliantShieldedPool;
  }
  override connect(signer: Signer): CompliantShieldedPool__factory {
    return super.connect(signer) as CompliantShieldedPool__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CompliantShieldedPoolInterface {
    return new utils.Interface(_abi) as CompliantShieldedPoolInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CompliantShieldedPool {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as CompliantShieldedPool;
  }
}
