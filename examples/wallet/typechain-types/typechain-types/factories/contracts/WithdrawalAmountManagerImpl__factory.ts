/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  WithdrawalAmountManagerImpl,
  WithdrawalAmountManagerImplInterface,
} from "../../contracts/WithdrawalAmountManagerImpl";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "deposits",
    outputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060ce8061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063b02c43d014602d575b600080fd5b605d60383660046080565b600260205260009081526040902080546001909101546001600160a01b039091169082565b604080516001600160a01b03909316835260208301919091520160405180910390f35b600060208284031215609157600080fd5b503591905056fea264697066735822122068ece7906ea4e52a6972d6ff5bc47b770ac2ca1cd28413e30e6ea3ffb79868c064736f6c63430008120033";

type WithdrawalAmountManagerImplConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WithdrawalAmountManagerImplConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class WithdrawalAmountManagerImpl__factory extends ContractFactory {
  constructor(...args: WithdrawalAmountManagerImplConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<WithdrawalAmountManagerImpl> {
    return super.deploy(
      overrides || {}
    ) as Promise<WithdrawalAmountManagerImpl>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): WithdrawalAmountManagerImpl {
    return super.attach(address) as WithdrawalAmountManagerImpl;
  }
  override connect(signer: Signer): WithdrawalAmountManagerImpl__factory {
    return super.connect(signer) as WithdrawalAmountManagerImpl__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WithdrawalAmountManagerImplInterface {
    return new utils.Interface(_abi) as WithdrawalAmountManagerImplInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): WithdrawalAmountManagerImpl {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as WithdrawalAmountManagerImpl;
  }
}
