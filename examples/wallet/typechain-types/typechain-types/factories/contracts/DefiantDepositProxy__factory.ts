/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  DefiantDepositProxy,
  DefiantDepositProxyInterface,
} from "../../contracts/DefiantDepositProxy";

const _abi = [
  {
    stateMutability: "nonpayable",
    type: "fallback",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b50607d8061001e6000396000f3fe6080604052348015600f57600080fd5b50366000803760008036600073dc64a140aa3e981100a9beca4e685f962f0cf6c95af43d6000803e8080156042573d6000f35b3d6000fdfea2646970667358221220656ee5a87e466081a9cccf4aac06a273e7108bcdc1e05b84c14f586243a8bc7164736f6c63430008120033";

type DefiantDepositProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DefiantDepositProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DefiantDepositProxy__factory extends ContractFactory {
  constructor(...args: DefiantDepositProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DefiantDepositProxy> {
    return super.deploy(overrides || {}) as Promise<DefiantDepositProxy>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): DefiantDepositProxy {
    return super.attach(address) as DefiantDepositProxy;
  }
  override connect(signer: Signer): DefiantDepositProxy__factory {
    return super.connect(signer) as DefiantDepositProxy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DefiantDepositProxyInterface {
    return new utils.Interface(_abi) as DefiantDepositProxyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DefiantDepositProxy {
    return new Contract(address, _abi, signerOrProvider) as DefiantDepositProxy;
  }
}
