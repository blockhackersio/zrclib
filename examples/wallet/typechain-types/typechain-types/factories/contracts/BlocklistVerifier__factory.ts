/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  BlocklistVerifier,
  BlocklistVerifierInterface,
} from "../../contracts/BlocklistVerifier";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256[2]",
        name: "a",
        type: "uint256[2]",
      },
      {
        internalType: "uint256[2][2]",
        name: "b",
        type: "uint256[2][2]",
      },
      {
        internalType: "uint256[2]",
        name: "c",
        type: "uint256[2]",
      },
      {
        internalType: "uint256[2]",
        name: "input",
        type: "uint256[2]",
      },
    ],
    name: "verifyProof",
    outputs: [
      {
        internalType: "bool",
        name: "r",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061110f806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063f5c9d69e14610030575b600080fd5b61004361003e366004610f95565b610057565b604051901515815260200160405180910390f35b6000610061610dbe565b60408051808201825287518152602080890151818301529083528151608081018352875151818401908152885183015160608084019190915290825283518085018552898401805151825251840151818501528284015284830191909152825180840184528751815287830151818401528484015282516002808252918101845260009390928301908036833701905050905060005b60028110156101465784816002811061011257610112611035565b602002015182828151811061012957610129611035565b60209081029190910101528061013e81611061565b9150506100f7565b506101518183610172565b6000036101635760019250505061016a565b6000925050505b949350505050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018161019e610369565b9050806080015151855160016101b4919061107a565b146101fb5760405162461bcd60e51b81526020600482015260126024820152711d995c9a599a595c8b5898590b5a5b9c1d5d60721b60448201526064015b60405180910390fd5b604080518082019091526000808252602082018190525b86518110156102ec578387828151811061022e5761022e611035565b6020026020010151106102835760405162461bcd60e51b815260206004820152601f60248201527f76657269666965722d6774652d736e61726b2d7363616c61722d6669656c640060448201526064016101f2565b6102d8826102d3856080015184600161029c919061107a565b815181106102ac576102ac611035565b60200260200101518a85815181106102c6576102c6611035565b602002602001015161070d565b6107a3565b9150806102e481611061565b915050610212565b5061031581836080015160008151811061030857610308611035565b60200260200101516107a3565b905061034b610327866000015161083c565b8660200151846000015185602001518587604001518b6040015189606001516108db565b61035b5760019350505050610363565b600093505050505b92915050565b610371610e0f565b6040805180820182527f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e281527f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d19266020808301919091529083528151608080820184527f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c8285019081527f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab606080850191909152908352845180860186527f304cfbd1e08a704a99f5e847d93f8c3caafddec46b7a0d379da69a4d112346a781527f1739c1b1a457a8c7313123d24d2f9192f896b7c63eea05a9d57f06547ad0cec8818601528385015285840192909252835180820185527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c28186018181527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed838601819052908352865180880188527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b8082527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa828901819052858901929092528989019490945287518086018952808901938452808701929092529181528651808801885292835282860191909152938401529084019190915281516003808252918101909252816020015b604080518082019091526000808252602082015281526020019060019003908161057e57505060808201908152604080518082019091527f2c6f3fa2f1981e169f5e4671d84997bfe49a1820347e9d934045f8bc6d4e6f3c81527f2d4343da651d9d33102c98a32da327e4b7ae336af9c22a8b491cbd36a037ac5660208201529051805160009061061157610611611035565b602002602001018190525060405180604001604052807f2311d14a7408256cd57662e76624bcaad659c9a6bb7ef2288eaaf5f166eb3e6c81526020017f2f7ac6c482f96b518e649ba0dcbee6f2b181bf59484366e119951a4df87be3e6815250816080015160018151811061068857610688611035565b602002602001018190525060405180604001604052807f13f03e0d12e6f45e816f4d8a155cb412ebd6bd282ae18e8cfb44838c4535153781526020017f294ee93228e8ed823d84dc0a65295fbf3eea35aaacc1c2b12337231dc69465a781525081608001516002815181106106ff576106ff611035565b602002602001018190525090565b6040805180820190915260008082526020820152610729610e60565b835181526020808501519082015260408101839052600060608360808460076107d05a03fa9050808061075857fe5b508061079b5760405162461bcd60e51b81526020600482015260126024820152711c185a5c9a5b99cb5b5d5b0b59985a5b195960721b60448201526064016101f2565b505092915050565b60408051808201909152600080825260208201526107bf610e7e565b8351815260208085015181830152835160408301528301516060808301919091526000908360c08460066107d05a03fa905080806107f957fe5b508061079b5760405162461bcd60e51b81526020600482015260126024820152711c185a5c9a5b99cb5859190b59985a5b195960721b60448201526064016101f2565b604080518082019091526000808252602082015281517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd479015801561088357506020830151155b156108a35750506040805180820190915260008082526020820152919050565b6040518060400160405280846000015181526020018285602001516108c8919061108d565b6108d290846110af565b90529392505050565b60408051600480825260a08201909252600091829190816020015b60408051808201909152600080825260208201528152602001906001900390816108f657505060408051600480825260a0820190925291925060009190602082015b610940610e9c565b8152602001906001900390816109385790505090508a8260008151811061096957610969611035565b6020026020010181905250888260018151811061098857610988611035565b602002602001018190525086826002815181106109a7576109a7611035565b602002602001018190525084826003815181106109c6576109c6611035565b602002602001018190525089816000815181106109e5576109e5611035565b60200260200101819052508781600181518110610a0457610a04611035565b60200260200101819052508581600281518110610a2357610a23611035565b60200260200101819052508381600381518110610a4257610a42611035565b6020026020010181905250610a578282610a66565b9b9a5050505050505050505050565b60008151835114610ab25760405162461bcd60e51b81526020600482015260166024820152751c185a5c9a5b99cb5b195b99dd1a1ccb59985a5b195960521b60448201526064016101f2565b82516000610ac18260066110c2565b905060008167ffffffffffffffff811115610ade57610ade610ef8565b604051908082528060200260200182016040528015610b07578160200160208202803683370190505b50905060005b83811015610d4257868181518110610b2757610b27611035565b60200260200101516000015182826006610b4191906110c2565b610b4c90600061107a565b81518110610b5c57610b5c611035565b602002602001018181525050868181518110610b7a57610b7a611035565b60200260200101516020015182826006610b9491906110c2565b610b9f90600161107a565b81518110610baf57610baf611035565b602002602001018181525050858181518110610bcd57610bcd611035565b6020908102919091010151515182610be68360066110c2565b610bf190600261107a565b81518110610c0157610c01611035565b602002602001018181525050858181518110610c1f57610c1f611035565b60209081029190910181015151015182610c3a8360066110c2565b610c4590600361107a565b81518110610c5557610c55611035565b602002602001018181525050858181518110610c7357610c73611035565b602002602001015160200151600060028110610c9157610c91611035565b602002015182610ca28360066110c2565b610cad90600461107a565b81518110610cbd57610cbd611035565b602002602001018181525050858181518110610cdb57610cdb611035565b602002602001015160200151600160028110610cf957610cf9611035565b602002015182610d0a8360066110c2565b610d1590600561107a565b81518110610d2557610d25611035565b602090810291909101015280610d3a81611061565b915050610b0d565b50610d4b610ebc565b6000602082602086026020860160086107d05a03fa90508080610d6a57fe5b5080610db05760405162461bcd60e51b81526020600482015260156024820152741c185a5c9a5b99cb5bdc18dbd9194b59985a5b1959605a1b60448201526064016101f2565b505115159695505050505050565b6040805160a081019091526000606082018181526080830191909152815260208101610de8610e9c565b8152602001610e0a604051806040016040528060008152602001600081525090565b905290565b6040805160e08101909152600060a0820181815260c0830191909152815260208101610e39610e9c565b8152602001610e46610e9c565b8152602001610e53610e9c565b8152602001606081525090565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b6040518060400160405280610eaf610eda565b8152602001610e0a610eda565b60405180602001604052806001906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715610f3f57634e487b7160e01b600052604160045260246000fd5b60405290565b600082601f830112610f5657600080fd5b610f5e610f0e565b806040840185811115610f7057600080fd5b845b81811015610f8a578035845260209384019301610f72565b509095945050505050565b6000806000806101408587031215610fac57600080fd5b610fb68686610f45565b9350604086605f870112610fc957600080fd5b610fd1610f0e565b8060c0880189811115610fe357600080fd5b8389015b8181101561100857610ff98b82610f45565b84526020909301928401610fe7565b508196506110168a82610f45565b95505050505061102a866101008701610f45565b905092959194509250565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016110735761107361104b565b5060010190565b808201808211156103635761036361104b565b6000826110aa57634e487b7160e01b600052601260045260246000fd5b500690565b818103818111156103635761036361104b565b80820281158282048414176103635761036361104b56fea26469706673582212207ce754047cd31ee9ac5b1c89a83f8fcc1280e52e5d76bc9a9ff7695bd4cf281364736f6c63430008120033";

type BlocklistVerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BlocklistVerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BlocklistVerifier__factory extends ContractFactory {
  constructor(...args: BlocklistVerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BlocklistVerifier> {
    return super.deploy(overrides || {}) as Promise<BlocklistVerifier>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BlocklistVerifier {
    return super.attach(address) as BlocklistVerifier;
  }
  override connect(signer: Signer): BlocklistVerifier__factory {
    return super.connect(signer) as BlocklistVerifier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BlocklistVerifierInterface {
    return new utils.Interface(_abi) as BlocklistVerifierInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BlocklistVerifier {
    return new Contract(address, _abi, signerOrProvider) as BlocklistVerifier;
  }
}
