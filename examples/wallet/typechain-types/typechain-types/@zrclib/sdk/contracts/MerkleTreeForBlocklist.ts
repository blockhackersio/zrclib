/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace MerkleTreeForBlocklist {
  export type ProofArgumentsStruct = {
    proof: PromiseOrValue<BytesLike>;
    oldRoot: PromiseOrValue<BytesLike>;
    newRoot: PromiseOrValue<BytesLike>;
  };

  export type ProofArgumentsStructOutput = [string, string, string] & {
    proof: string;
    oldRoot: string;
    newRoot: string;
  };
}

export interface MerkleTreeForBlocklistInterface extends utils.Interface {
  functions: {
    "blockDeposit((bytes,bytes32,bytes32),uint256)": FunctionFragment;
    "blockIndices(uint256)": FunctionFragment;
    "levels()": FunctionFragment;
    "parseProof(bytes)": FunctionFragment;
    "root()": FunctionFragment;
    "verifier()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "blockDeposit"
      | "blockIndices"
      | "levels"
      | "parseProof"
      | "root"
      | "verifier"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "blockDeposit",
    values: [
      MerkleTreeForBlocklist.ProofArgumentsStruct,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "blockIndices",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "levels", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "parseProof",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "root", values?: undefined): string;
  encodeFunctionData(functionFragment: "verifier", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "blockDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blockIndices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "levels", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "parseProof", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "root", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verifier", data: BytesLike): Result;

  events: {
    "NewBlockDeposit(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewBlockDeposit"): EventFragment;
}

export interface NewBlockDepositEventObject {
  index: BigNumber;
}
export type NewBlockDepositEvent = TypedEvent<
  [BigNumber],
  NewBlockDepositEventObject
>;

export type NewBlockDepositEventFilter = TypedEventFilter<NewBlockDepositEvent>;

export interface MerkleTreeForBlocklist extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MerkleTreeForBlocklistInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    blockDeposit(
      proof: MerkleTreeForBlocklist.ProofArgumentsStruct,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    blockIndices(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    levels(overrides?: CallOverrides): Promise<[number]>;

    parseProof(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber],
        [[BigNumber, BigNumber], [BigNumber, BigNumber]],
        [BigNumber, BigNumber]
      ] & {
        a: [BigNumber, BigNumber];
        b: [[BigNumber, BigNumber], [BigNumber, BigNumber]];
        c: [BigNumber, BigNumber];
      }
    >;

    root(overrides?: CallOverrides): Promise<[string]>;

    verifier(overrides?: CallOverrides): Promise<[string]>;
  };

  blockDeposit(
    proof: MerkleTreeForBlocklist.ProofArgumentsStruct,
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  blockIndices(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  levels(overrides?: CallOverrides): Promise<number>;

  parseProof(
    data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber, BigNumber],
      [[BigNumber, BigNumber], [BigNumber, BigNumber]],
      [BigNumber, BigNumber]
    ] & {
      a: [BigNumber, BigNumber];
      b: [[BigNumber, BigNumber], [BigNumber, BigNumber]];
      c: [BigNumber, BigNumber];
    }
  >;

  root(overrides?: CallOverrides): Promise<string>;

  verifier(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    blockDeposit(
      proof: MerkleTreeForBlocklist.ProofArgumentsStruct,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    blockIndices(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    levels(overrides?: CallOverrides): Promise<number>;

    parseProof(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber],
        [[BigNumber, BigNumber], [BigNumber, BigNumber]],
        [BigNumber, BigNumber]
      ] & {
        a: [BigNumber, BigNumber];
        b: [[BigNumber, BigNumber], [BigNumber, BigNumber]];
        c: [BigNumber, BigNumber];
      }
    >;

    root(overrides?: CallOverrides): Promise<string>;

    verifier(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "NewBlockDeposit(uint256)"(index?: null): NewBlockDepositEventFilter;
    NewBlockDeposit(index?: null): NewBlockDepositEventFilter;
  };

  estimateGas: {
    blockDeposit(
      proof: MerkleTreeForBlocklist.ProofArgumentsStruct,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    blockIndices(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    levels(overrides?: CallOverrides): Promise<BigNumber>;

    parseProof(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    root(overrides?: CallOverrides): Promise<BigNumber>;

    verifier(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    blockDeposit(
      proof: MerkleTreeForBlocklist.ProofArgumentsStruct,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    blockIndices(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    levels(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    parseProof(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    root(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    verifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
