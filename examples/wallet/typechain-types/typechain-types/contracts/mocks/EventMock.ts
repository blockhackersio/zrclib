/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface EventMockInterface extends utils.Interface {
  functions: {
    "newCommitment(bytes32,uint256,bytes)": FunctionFragment;
    "newNullifier(bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "newCommitment" | "newNullifier"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "newCommitment",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "newNullifier",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "newCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newNullifier",
    data: BytesLike
  ): Result;

  events: {
    "NewCommitment(bytes32,uint256,bytes)": EventFragment;
    "NewNullifier(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewCommitment"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewNullifier"): EventFragment;
}

export interface NewCommitmentEventObject {
  commitment: string;
  index: BigNumber;
  encryptedOutput: string;
}
export type NewCommitmentEvent = TypedEvent<
  [string, BigNumber, string],
  NewCommitmentEventObject
>;

export type NewCommitmentEventFilter = TypedEventFilter<NewCommitmentEvent>;

export interface NewNullifierEventObject {
  nullifier: string;
}
export type NewNullifierEvent = TypedEvent<[string], NewNullifierEventObject>;

export type NewNullifierEventFilter = TypedEventFilter<NewNullifierEvent>;

export interface EventMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EventMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    newCommitment(
      _commitment: PromiseOrValue<BytesLike>,
      _index: PromiseOrValue<BigNumberish>,
      _encryptedOutput: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    newNullifier(
      _nullifier: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  newCommitment(
    _commitment: PromiseOrValue<BytesLike>,
    _index: PromiseOrValue<BigNumberish>,
    _encryptedOutput: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  newNullifier(
    _nullifier: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    newCommitment(
      _commitment: PromiseOrValue<BytesLike>,
      _index: PromiseOrValue<BigNumberish>,
      _encryptedOutput: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    newNullifier(
      _nullifier: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "NewCommitment(bytes32,uint256,bytes)"(
      commitment?: PromiseOrValue<BytesLike> | null,
      index?: PromiseOrValue<BigNumberish> | null,
      encryptedOutput?: null
    ): NewCommitmentEventFilter;
    NewCommitment(
      commitment?: PromiseOrValue<BytesLike> | null,
      index?: PromiseOrValue<BigNumberish> | null,
      encryptedOutput?: null
    ): NewCommitmentEventFilter;

    "NewNullifier(bytes32)"(
      nullifier?: PromiseOrValue<BytesLike> | null
    ): NewNullifierEventFilter;
    NewNullifier(
      nullifier?: PromiseOrValue<BytesLike> | null
    ): NewNullifierEventFilter;
  };

  estimateGas: {
    newCommitment(
      _commitment: PromiseOrValue<BytesLike>,
      _index: PromiseOrValue<BigNumberish>,
      _encryptedOutput: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    newNullifier(
      _nullifier: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    newCommitment(
      _commitment: PromiseOrValue<BytesLike>,
      _index: PromiseOrValue<BigNumberish>,
      _encryptedOutput: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    newNullifier(
      _nullifier: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
