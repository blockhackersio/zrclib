/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  SwapExecutor,
  SwapExecutorInterface,
} from "../../../../@zrclib/sdk/contracts/SwapExecutor";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenIn",
        type: "address",
      },
      {
        internalType: "address",
        name: "_tokenOut",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_amountOutMin",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_swapRouter",
        type: "address",
      },
      {
        internalType: "address",
        name: "_swapRecipient",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_swapData",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "_transactData",
        type: "bytes",
      },
    ],
    name: "executeSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610f66806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063a0c6a6ef14610030575b600080fd5b61004361003e36600461087d565b610045565b005b61005a6001600160a01b038b168760006103d2565b61006e6001600160a01b038b16878a6103d2565b6000866001600160a01b0316858560405161008a929190610946565b6000604051808303816000865af19150503d80600081146100c7576040519150601f19603f3d011682016040523d82523d6000602084013e6100cc565b606091505b50509050806101225760405162461bcd60e51b815260206004820152601960248201527f537761704578656375746f723a2073776170206661696c65640000000000000060448201526064015b60405180910390fd5b5061014f6040518060400160405280600b81526020016a427265616b706f696e743160a81b81525061051f565b6040516370a0823160e01b81523060048201526000906001600160a01b038b16906370a0823190602401602060405180830381865afa158015610196573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ba9190610956565b90508781101561021e5760405162461bcd60e51b815260206004820152602960248201527f537761704578656375746f723a207265636569766564206c657373207468616e60448201526808195e1c1958dd195960ba1b6064820152608401610119565b6001600160a01b038616610385576102586040518060400160405280600b81526020016a213932b0b5b837b4b73a1960a91b81525061051f565b60008061026784860186610be5565b915091506102976040518060400160405280600b81526020016a427265616b706f696e743360a81b81525061051f565b6102ac6001600160a01b038d163360006103d2565b6102c06001600160a01b038d16338c6103d2565b6102ec6040518060400160405280600b81526020016a109c99585adc1bda5b9d0d60aa1b81525061051f565b604080518082018252838152602081018390529051636227432960e01b815233916362274329916103209190600401610e30565b600060405180830381600087803b15801561033a57600080fd5b505af115801561034e573d6000803e3d6000fd5b5050505061037e6040518060400160405280600b81526020016a427265616b706f696e743560a81b81525061051f565b50506103c5565b6103b16040518060400160405280600b81526020016a213932b0b5b837b4b73a1b60a91b81525061051f565b6103c56001600160a01b038b168783610565565b5050505050505050505050565b80158061044c5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015610426573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044a9190610956565b155b6104b75760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610119565b6040516001600160a01b03831660248201526044810182905261051a90849063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610595565b505050565b610562816040516024016105339190610ed8565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052610667565b50565b6040516001600160a01b03831660248201526044810182905261051a90849063a9059cbb60e01b906064016104e3565b60006105ea826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166106889092919063ffffffff16565b80519091501561051a57808060200190518101906106089190610ef2565b61051a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610119565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6060610697848460008561069f565b949350505050565b6060824710156107005760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610119565b600080866001600160a01b0316858760405161071c9190610f14565b60006040518083038185875af1925050503d8060008114610759576040519150601f19603f3d011682016040523d82523d6000602084013e61075e565b606091505b509150915061076f8783838761077a565b979650505050505050565b606083156107e95782516000036107e2576001600160a01b0385163b6107e25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610119565b5081610697565b61069783838151156107fe5781518083602001fd5b8060405162461bcd60e51b81526004016101199190610ed8565b80356001600160a01b038116811461082f57600080fd5b919050565b60008083601f84011261084657600080fd5b50813567ffffffffffffffff81111561085e57600080fd5b60208301915083602082850101111561087657600080fd5b9250929050565b6000806000806000806000806000806101008b8d03121561089d57600080fd5b6108a68b610818565b99506108b460208c01610818565b985060408b0135975060608b013596506108d060808c01610818565b95506108de60a08c01610818565b945060c08b013567ffffffffffffffff808211156108fb57600080fd5b6109078e838f01610834565b909650945060e08d013591508082111561092057600080fd5b5061092d8d828e01610834565b915080935050809150509295989b9194979a5092959850565b8183823760009101908152919050565b60006020828403121561096857600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b604051610140810167ffffffffffffffff811182821017156109a9576109a961096f565b60405290565b60405160e0810167ffffffffffffffff811182821017156109a9576109a961096f565b600082601f8301126109e357600080fd5b813567ffffffffffffffff808211156109fe576109fe61096f565b604051601f8301601f19908116603f01168101908282118183101715610a2657610a2661096f565b81604052838152866020858801011115610a3f57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600082601f830112610a7057600080fd5b6040516040810181811067ffffffffffffffff82111715610a9357610a9361096f565b8060405250806040840185811115610aaa57600080fd5b845b81811015610ac4578035835260209283019201610aac565b509195945050505050565b60006101408284031215610ae257600080fd5b610aea610985565b9050610af582610818565b815260208201356020820152604082013567ffffffffffffffff80821115610b1c57600080fd5b610b28858386016109d2565b60408401526060840135915080821115610b4157600080fd5b610b4d858386016109d2565b6060840152610b5e60808501610818565b608084015260a084013560a0840152610b7960c08501610818565b60c0840152610b8a60e08501610818565b60e084015261010091508184013581811115610ba557600080fd5b610bb1868287016109d2565b838501525061012091508184013581811115610bcc57600080fd5b610bd8868287016109d2565b8385015250505092915050565b60008060408385031215610bf857600080fd5b823567ffffffffffffffff80821115610c1057600080fd5b908401906101208287031215610c2557600080fd5b610c2d6109af565b823582811115610c3c57600080fd5b610c48888286016109d2565b82525060208301356020820152610c628760408501610a5f565b6040820152610c748760808501610a5f565b606082015260c08301356080820152610c8f60e08401610818565b60a082015261010083013560c0820152809450506020850135915080821115610cb757600080fd5b50610cc485828601610acf565b9150509250929050565b60005b83811015610ce9578181015183820152602001610cd1565b50506000910152565b60008151808452610d0a816020860160208601610cce565b601f01601f19169290920160200192915050565b8060005b6002811015610d41578151845260209384019390910190600101610d22565b50505050565b80516001600160a01b031682526000610140602083015160208501526040830151816040860152610d7a82860182610cf2565b91505060608301518482036060860152610d948282610cf2565b9150506080830151610db160808601826001600160a01b03169052565b5060a083015160a085015260c0830151610dd660c08601826001600160a01b03169052565b5060e0830151610df160e08601826001600160a01b03169052565b506101008084015185830382870152610e0a8382610cf2565b925050506101208084015185830382870152610e268382610cf2565b9695505050505050565b6020815260008251604060208401528051610120806060860152610e58610180860183610cf2565b9150602083015160808601526040830151610e7660a0870182610d1e565b506060830151610e8960e0870182610d1e565b5060808301519085015260a08201516001600160a01b031661014085015260c0909101516101608401526020840151838203601f1901604085015290610ecf8183610d47565b95945050505050565b602081526000610eeb6020830184610cf2565b9392505050565b600060208284031215610f0457600080fd5b81518015158114610eeb57600080fd5b60008251610f26818460208701610cce565b919091019291505056fea2646970667358221220b5f4f859c00c102646d2531f585f7cd07dc771de4d9c679e5afc95c5dd88489264736f6c63430008120033";

type SwapExecutorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SwapExecutorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SwapExecutor__factory extends ContractFactory {
  constructor(...args: SwapExecutorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SwapExecutor> {
    return super.deploy(overrides || {}) as Promise<SwapExecutor>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SwapExecutor {
    return super.attach(address) as SwapExecutor;
  }
  override connect(signer: Signer): SwapExecutor__factory {
    return super.connect(signer) as SwapExecutor__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapExecutorInterface {
    return new utils.Interface(_abi) as SwapExecutorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SwapExecutor {
    return new Contract(address, _abi, signerOrProvider) as SwapExecutor;
  }
}
