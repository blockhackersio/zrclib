/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockSwapRouter,
  MockSwapRouterInterface,
} from "../../../contracts/mocks/MockSwapRouter";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenInAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenOutAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "swap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506102d1806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063df791e5014610030575b600080fd5b61004361003e36600461021d565b610045565b005b6040516370a0823160e01b81523060048201528390839083906001600160a01b038316906370a0823190602401602060405180830381865afa15801561008f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100b39190610259565b10156101105760405162461bcd60e51b815260206004820152602260248201527f53776170526f757465723a20496e73756666696369656e74206c697175696469604482015261747960f01b606482015260840160405180910390fd5b6040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b038316906323b872dd906064016020604051808303816000875af1158015610163573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101879190610272565b5060405163a9059cbb60e01b8152336004820152602481018490526001600160a01b0382169063a9059cbb906044016020604051808303816000875af11580156101d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f99190610272565b505050505050565b80356001600160a01b038116811461021857600080fd5b919050565b60008060006060848603121561023257600080fd5b61023b84610201565b925061024960208501610201565b9150604084013590509250925092565b60006020828403121561026b57600080fd5b5051919050565b60006020828403121561028457600080fd5b8151801515811461029457600080fd5b939250505056fea264697066735822122027bab6100d0967c6afee2326d8b37ba9312aacc1399dd0b81c50e6529c2f5bdf64736f6c63430008120033";

type MockSwapRouterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockSwapRouterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockSwapRouter__factory extends ContractFactory {
  constructor(...args: MockSwapRouterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockSwapRouter> {
    return super.deploy(overrides || {}) as Promise<MockSwapRouter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockSwapRouter {
    return super.attach(address) as MockSwapRouter;
  }
  override connect(signer: Signer): MockSwapRouter__factory {
    return super.connect(signer) as MockSwapRouter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockSwapRouterInterface {
    return new utils.Interface(_abi) as MockSwapRouterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockSwapRouter {
    return new Contract(address, _abi, signerOrProvider) as MockSwapRouter;
  }
}
