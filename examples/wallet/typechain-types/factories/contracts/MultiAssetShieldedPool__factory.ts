/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  MultiAssetShieldedPool,
  MultiAssetShieldedPoolInterface,
} from "../../contracts/MultiAssetShieldedPool";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_hasherAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_verifier",
        type: "address",
      },
      {
        internalType: "address",
        name: "_swapExecutor",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "commitment",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "encryptedOutput",
        type: "bytes",
      },
    ],
    name: "NewCommitment",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "nullifier",
        type: "bytes32",
      },
    ],
    name: "NewNullifier",
    type: "event",
  },
  {
    inputs: [],
    name: "FIELD_SIZE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MAX_EXT_AMOUNT",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ROOT_HISTORY_SIZE",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ZERO_VALUE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "currentRootIndex",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "filledSubtrees",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_left",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "_right",
        type: "bytes32",
      },
    ],
    name: "hashLeftRight",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "hasher",
    outputs: [
      {
        internalType: "contract IHasher",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_root",
        type: "bytes32",
      },
    ],
    name: "isKnownRoot",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_nullifierHash",
        type: "bytes32",
      },
    ],
    name: "isSpent",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "levels",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nextIndex",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "nullifierHashes",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "parseProof",
    outputs: [
      {
        internalType: "uint256[2]",
        name: "a",
        type: "uint256[2]",
      },
      {
        internalType: "uint256[2][2]",
        name: "b",
        type: "uint256[2][2]",
      },
      {
        internalType: "uint256[2]",
        name: "c",
        type: "uint256[2]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "roots",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "swapExecutor",
    outputs: [
      {
        internalType: "contract SwapExecutor",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "bytes",
                name: "proof",
                type: "bytes",
              },
              {
                internalType: "bytes32",
                name: "root",
                type: "bytes32",
              },
              {
                internalType: "bytes32[2]",
                name: "inputNullifiers",
                type: "bytes32[2]",
              },
              {
                internalType: "bytes32[2]",
                name: "outputCommitments",
                type: "bytes32[2]",
              },
              {
                internalType: "uint256",
                name: "publicAmount",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "publicAsset",
                type: "address",
              },
              {
                internalType: "bytes32",
                name: "extDataHash",
                type: "bytes32",
              },
            ],
            internalType: "struct ShieldedPool.ProofArguments",
            name: "proofArguments",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "address",
                name: "recipient",
                type: "address",
              },
              {
                internalType: "int256",
                name: "extAmount",
                type: "int256",
              },
              {
                internalType: "bytes",
                name: "encryptedOutput1",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "encryptedOutput2",
                type: "bytes",
              },
              {
                internalType: "address",
                name: "tokenOut",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amountOutMin",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "swapRecipient",
                type: "address",
              },
              {
                internalType: "address",
                name: "swapRouter",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "swapData",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "transactData",
                type: "bytes",
              },
            ],
            internalType: "struct ShieldedPool.ExtData",
            name: "extData",
            type: "tuple",
          },
        ],
        internalType: "struct ShieldedPool.Proof",
        name: "_proof",
        type: "tuple",
      },
    ],
    name: "transact",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "bytes",
                name: "proof",
                type: "bytes",
              },
              {
                internalType: "bytes32",
                name: "root",
                type: "bytes32",
              },
              {
                internalType: "bytes32[2]",
                name: "inputNullifiers",
                type: "bytes32[2]",
              },
              {
                internalType: "bytes32[2]",
                name: "outputCommitments",
                type: "bytes32[2]",
              },
              {
                internalType: "uint256",
                name: "publicAmount",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "publicAsset",
                type: "address",
              },
              {
                internalType: "bytes32",
                name: "extDataHash",
                type: "bytes32",
              },
            ],
            internalType: "struct ShieldedPool.ProofArguments",
            name: "proofArguments",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "address",
                name: "recipient",
                type: "address",
              },
              {
                internalType: "int256",
                name: "extAmount",
                type: "int256",
              },
              {
                internalType: "bytes",
                name: "encryptedOutput1",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "encryptedOutput2",
                type: "bytes",
              },
              {
                internalType: "address",
                name: "tokenOut",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amountOutMin",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "swapRecipient",
                type: "address",
              },
              {
                internalType: "address",
                name: "swapRouter",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "swapData",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "transactData",
                type: "bytes",
              },
            ],
            internalType: "struct ShieldedPool.ExtData",
            name: "extData",
            type: "tuple",
          },
        ],
        internalType: "struct ShieldedPool.Proof",
        name: "_proof",
        type: "tuple",
      },
    ],
    name: "transactAndSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "verifier",
    outputs: [
      {
        internalType: "contract TransactionVerifier",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "i",
        type: "uint256",
      },
    ],
    name: "zeros",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c0604052600280546001600160401b0319169055600160f81b6003553480156200002957600080fd5b5060405162002eb138038062002eb18339810160408190526200004c9162000841565b6005838383838362000062565b60405180910390fd5b60208263ffffffff1610620000ba5760405162461bcd60e51b815260206004820152601e60248201527f5f6c6576656c732073686f756c64206265206c657373207468616e2033320000604482015260640162000059565b63ffffffff90911660a0526001600160a01b03908116608052600580548483166001600160a01b03199182161790915560068054928416929091169190911790556200010562000112565b50505050505050620008bd565b60005b60a05163ffffffff168163ffffffff16101562000168576200013d63ffffffff8216620001aa565b63ffffffff8216600090815260208190526040902055806200015f816200088b565b91505062000115565b5060a0516200017d9063ffffffff16620001aa565b6000805260016020527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb4955565b600081600003620001dc57507f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c919050565b816001036200020c57507f13e37f2d6cb86c78ccc1788607c2b199788c6bb0a615a21f2e7a8e88384222f8919050565b816002036200023c57507f217126fa352c326896e8c2803eec8fd63ad50cf65edfef27a41a9e32dc622765919050565b816003036200026c57507f0e28a61a9b3e91007d5a9e3ada18e1b24d6d230c618388ee5df34cacd7397eee919050565b816004036200029c57507f27953447a6979839536badc5425ed15fadb0e292e9bc36f92f0aa5cfa5013587919050565b81600503620002cc57507f194191edbfb91d10f6a7afd315f33095410c7801c47175c2df6dc2cce0e3affc919050565b81600603620002fc57507f1733dece17d71190516dbaf1927936fa643dc7079fc0cc731de9d6845a47741f919050565b816007036200032c57507f267855a7dc75db39d81d17f95d0a7aa572bf5ae19f4db0e84221d2b2ef999219919050565b816008036200035c57507f1184e11836b4c36ad8238a340ecc0985eeba665327e33e9b0e3641027c27620d919050565b816009036200038c57507f0702ab83a135d7f55350ab1bfaa90babd8fc1d2b3e6a7215381a7b2213d6c5ce919050565b81600a03620003bc57507f2eecc0de814cfd8c57ce882babb2e30d1da56621aef7a47f3291cffeaec26ad7919050565b81600b03620003ec57507f280bc02145c155d5833585b6c7b08501055157dd30ce005319621dc462d33b47919050565b81600c036200041c57507f045132221d1fa0a7f4aed8acd2cbec1e2189b7732ccb2ec272b9c60f0d5afc5b919050565b81600d036200044c57507f27f427ccbf58a44b1270abbe4eda6ba53bd6ac4d88cf1e00a13c4371ce71d366919050565b81600e036200047c57507f1617eaae5064f26e8f8a6493ae92bfded7fde71b65df1ca6d5dcec0df70b2cef919050565b81600f03620004ac57507f20c6b400d0ea1b15435703c31c31ee63ad7ba5c8da66cec2796feacea575abca919050565b81601003620004dc57507f09589ddb438723f53a8e57bdada7c5f8ed67e8fece3889a73618732965645eec919050565b816011036200050b57507e64b6a738a5ff537db7b220f3394f0ecbd35bfd355c5425dc1166bf3236079b919050565b816012036200053b57507f095de56281b1d5055e897c3574ff790d5ee81dbc5df784ad2d67795e557c9e9f919050565b816013036200056b57507f11cf2e2887aa21963a6ec14289183efe4d4c60f14ecd3d6fe0beebdf855a9b63919050565b816014036200059b57507f2b0f6fc0179fa65b6f73627c0e1e84c7374d2eaec44c9a48f2571393ea77bcbb919050565b81601503620005cb57507f16fdb637c2abf9c0f988dbf2fd64258c46fb6a273d537b2cf1603ea460b13279919050565b81601603620005fb57507f21bbd7e944f6124dad4c376df9cc12e7ca66e47dff703ff7cedb1a454edcf0ff919050565b816017036200062b57507f2784f8220b1c963e468f590f137baaa1625b3b92a27ad9b6e84eb0d3454d9962919050565b816018036200065b57507f16ace1a65b7534142f8cc1aad810b3d6a7a74ca905d9c275cb98ba57e509fc10919050565b816019036200068b57507f2328068c6a8c24265124debd8fe10d3f29f0665ea725a65e3638f6192a96a013919050565b81601a03620006bb57507f2ddb991be1f028022411b4c4d2c22043e5e751c120736f00adf54acab1c9ac14919050565b81601b03620006eb57507f0113798410eaeb95056a464f70521eb58377c0155f2fe518a5594d38cc209cc0919050565b81601c036200071b57507f202d1ae61526f0d0d01ef80fb5d4055a7af45721024c2c24cffd6a3798f54d50919050565b81601d036200074b57507f23ab323453748129f2765f79615022f5bebd6f4096a796300aab049a60b0f187919050565b81601e036200077b57507f1f15585f8947e378bcf8bd918716799da909acdb944c57150b1eb4565fda8aa0919050565b81601f03620007ab57507f1eb064b21055ac6a350cf41eb30e4ce2cb19680217df3a243617c2838185ad06919050565b81602003620007db57507f25a90efc49af54a5b7154a6eaba978dcf04796b4984fe54be8d4ea8579e1f1e6919050565b60405162461bcd60e51b815260206004820152601360248201527f496e646578206f7574206f6620626f756e647300000000000000000000000000604482015260640162000059565b919050565b80516001600160a01b03811681146200082457600080fd5b6000806000606084860312156200085757600080fd5b620008628462000829565b9250620008726020850162000829565b9150620008826040850162000829565b90509250925092565b600063ffffffff808316818103620008b357634e487b7160e01b600052601160045260246000fd5b6001019392505050565b60805160a0516125b9620008f8600039600081816101da01528181611a530152611b10015260008181610341015261048701526125b96000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c806384fcec46116100b8578063e5285dcc1161007c578063e5285dcc146102df578063e829558814610302578063ec73295914610315578063ed33639f1461033c578063f178e47c14610363578063fc7e9c6f1461038357600080fd5b806384fcec461461027757806390eeb02b1461028a578063ba70f7571461029a578063c2b40ae4146102b7578063cd87a3b4146102d757600080fd5b806362274329116100ff57806362274329146102115780636d9833e31461022657806375d8498f14610239578063793deea31461024c5780637fe24ffe1461026e57600080fd5b806317cc915c1461013c5780632b7ac3f31461017457806338bf282e1461019f578063414a37ba146101c05780634ecf518b146101d5575b600080fd5b61015f61014a366004611cad565b60046020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b600554610187906001600160a01b031681565b6040516001600160a01b03909116815260200161016b565b6101b26101ad366004611cc6565b61039b565b60405190815260200161016b565b6101b260008051602061256483398151915281565b6101fc7f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff909116815260200161016b565b61022461021f366004611ce8565b61050f565b005b61015f610234366004611cad565b610723565b610224610247366004611ce8565b6107a1565b61025f61025a366004611d40565b6108dc565b60405161016b93929190611e6b565b6101b260035481565b600654610187906001600160a01b031681565b6002546101fc9063ffffffff1681565b60025463ffffffff166000908152600160205260409020546101b2565b6101b26102c5366004611cad565b60016020526000908152604090205481565b6101fc606481565b61015f6102ed366004611cad565b60009081526004602052604090205460ff1690565b6101b2610310366004611cad565b61093b565b6101b27f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c81565b6101877f000000000000000000000000000000000000000000000000000000000000000081565b6101b2610371366004611cad565b60006020819052908152604090205481565b6002546101fc90640100000000900463ffffffff1681565b600060008051602061256483398151915283106103ff5760405162461bcd60e51b815260206004820181905260248201527f5f6c6566742073686f756c6420626520696e7369646520746865206669656c6460448201526064015b60405180910390fd5b60008051602061256483398151915282106104665760405162461bcd60e51b815260206004820152602160248201527f5f72696768742073686f756c6420626520696e7369646520746865206669656c6044820152601960fa1b60648201526084016103f6565b61046e611c62565b8381526020810183905260405163014cf2b360e51b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063299e5660906104c4908490600401611eb2565b602060405180830381865afa1580156104e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105059190611ee3565b9150505b92915050565b600061051e6020830183611efc565b6020013513156105e55760006105348280611f1d565b6105469061010081019060e001611f4b565b90506001600160a01b0381166323b872dd33306105666020870187611efc565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526020013560448201526064016020604051808303816000875af11580156105be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e29190611f66565b50505b6105ee81610f8e565b60006105fd6020830183611efc565b6020013512156107205760006106166020830183611efc565b610624906020810190611f4b565b6001600160a01b03160361064a5760405162461bcd60e51b81526004016103f690611f88565b60006106568280611f1d565b6106689061010081019060e001611f4b565b90506001600160a01b03811663a9059cbb6106866020850185611efc565b610694906020810190611f4b565b6106a16020860186611efc565b602001356106ae90611fd5565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156106f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071d9190611f66565b50505b50565b600081810361073457506000919050565b60025463ffffffff16805b63ffffffff81166000908152600160205260409020548403610765575060019392505050565b8063ffffffff16600003610777575060645b8061078181611ff1565b9150508163ffffffff168163ffffffff160361073f575060009392505050565b60006107b06020830183611efc565b6020013512156108d35760006107c96020830183611efc565b6107d7906020810190611f4b565b6001600160a01b0316036107fd5760405162461bcd60e51b81526004016103f690611f88565b60006108098280611f1d565b61081b9061010081019060e001611f4b565b90506001600160a01b03811663a9059cbb6108396020850185611efc565b610847906020810190611f4b565b6108546020860186611efc565b6020013561086190611fd5565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156108ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d09190611f66565b50505b61072081611020565b6108e4611c62565b6108ec611c80565b6108f4611c62565b838060200190518101906109089190612011565b895160208b8101518b820193909352928a5281830193909352929092528082019290925291905285015283529193909250565b60008160000361096c57507f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c919050565b8160010361099b57507f13e37f2d6cb86c78ccc1788607c2b199788c6bb0a615a21f2e7a8e88384222f8919050565b816002036109ca57507f217126fa352c326896e8c2803eec8fd63ad50cf65edfef27a41a9e32dc622765919050565b816003036109f957507f0e28a61a9b3e91007d5a9e3ada18e1b24d6d230c618388ee5df34cacd7397eee919050565b81600403610a2857507f27953447a6979839536badc5425ed15fadb0e292e9bc36f92f0aa5cfa5013587919050565b81600503610a5757507f194191edbfb91d10f6a7afd315f33095410c7801c47175c2df6dc2cce0e3affc919050565b81600603610a8657507f1733dece17d71190516dbaf1927936fa643dc7079fc0cc731de9d6845a47741f919050565b81600703610ab557507f267855a7dc75db39d81d17f95d0a7aa572bf5ae19f4db0e84221d2b2ef999219919050565b81600803610ae457507f1184e11836b4c36ad8238a340ecc0985eeba665327e33e9b0e3641027c27620d919050565b81600903610b1357507f0702ab83a135d7f55350ab1bfaa90babd8fc1d2b3e6a7215381a7b2213d6c5ce919050565b81600a03610b4257507f2eecc0de814cfd8c57ce882babb2e30d1da56621aef7a47f3291cffeaec26ad7919050565b81600b03610b7157507f280bc02145c155d5833585b6c7b08501055157dd30ce005319621dc462d33b47919050565b81600c03610ba057507f045132221d1fa0a7f4aed8acd2cbec1e2189b7732ccb2ec272b9c60f0d5afc5b919050565b81600d03610bcf57507f27f427ccbf58a44b1270abbe4eda6ba53bd6ac4d88cf1e00a13c4371ce71d366919050565b81600e03610bfe57507f1617eaae5064f26e8f8a6493ae92bfded7fde71b65df1ca6d5dcec0df70b2cef919050565b81600f03610c2d57507f20c6b400d0ea1b15435703c31c31ee63ad7ba5c8da66cec2796feacea575abca919050565b81601003610c5c57507f09589ddb438723f53a8e57bdada7c5f8ed67e8fece3889a73618732965645eec919050565b81601103610c8a57507e64b6a738a5ff537db7b220f3394f0ecbd35bfd355c5425dc1166bf3236079b919050565b81601203610cb957507f095de56281b1d5055e897c3574ff790d5ee81dbc5df784ad2d67795e557c9e9f919050565b81601303610ce857507f11cf2e2887aa21963a6ec14289183efe4d4c60f14ecd3d6fe0beebdf855a9b63919050565b81601403610d1757507f2b0f6fc0179fa65b6f73627c0e1e84c7374d2eaec44c9a48f2571393ea77bcbb919050565b81601503610d4657507f16fdb637c2abf9c0f988dbf2fd64258c46fb6a273d537b2cf1603ea460b13279919050565b81601603610d7557507f21bbd7e944f6124dad4c376df9cc12e7ca66e47dff703ff7cedb1a454edcf0ff919050565b81601703610da457507f2784f8220b1c963e468f590f137baaa1625b3b92a27ad9b6e84eb0d3454d9962919050565b81601803610dd357507f16ace1a65b7534142f8cc1aad810b3d6a7a74ca905d9c275cb98ba57e509fc10919050565b81601903610e0257507f2328068c6a8c24265124debd8fe10d3f29f0665ea725a65e3638f6192a96a013919050565b81601a03610e3157507f2ddb991be1f028022411b4c4d2c22043e5e751c120736f00adf54acab1c9ac14919050565b81601b03610e6057507f0113798410eaeb95056a464f70521eb58377c0155f2fe518a5594d38cc209cc0919050565b81601c03610e8f57507f202d1ae61526f0d0d01ef80fb5d4055a7af45721024c2c24cffd6a3798f54d50919050565b81601d03610ebe57507f23ab323453748129f2765f79615022f5bebd6f4096a796300aab049a60b0f187919050565b81601e03610eed57507f1f15585f8947e378bcf8bd918716799da909acdb944c57150b1eb4565fda8aa0919050565b81601f03610f1c57507f1eb064b21055ac6a350cf41eb30e4ce2cb19680217df3a243617c2838185ad06919050565b81602003610f4b57507f25a90efc49af54a5b7154a6eaba978dcf04796b4984fe54be8d4ea8579e1f1e6919050565b60405162461bcd60e51b8152602060048201526013602482015272496e646578206f7574206f6620626f756e647360681b60448201526064016103f6565b919050565b6006546001600160a01b0316610fa76020830183611efc565b610fb5906020810190611f4b565b6001600160a01b0316036110175760405162461bcd60e51b8152602060048201526024808201527f726563697069656e742073686f756c64206e6f742062652073776170457865636044820152633aba37b960e11b60648201526084016103f6565b610720816113ae565b600061102f6020830183611efc565b60200135126110805760405162461bcd60e51b815260206004820152601c60248201527f657874416d6f756e742073686f756c64206265206e656761746976650000000060448201526064016103f6565b600061108c8280611f1d565b61109e9061010081019060e001611f4b565b6001600160a01b0316036110f45760405162461bcd60e51b815260206004820152601d60248201527f7075626c696341737365742073686f756c64206e6f742062652030783000000060448201526064016103f6565b6110fd816113ae565b6006546001600160a01b03166111166020830183611efc565b611124906020810190611f4b565b6001600160a01b0316146111855760405162461bcd60e51b815260206004820152602260248201527f6f6e6c7920737761704578656375746f722063616e20626520726563697069656044820152611b9d60f21b60648201526084016103f6565b60006111946020830183611efc565b6111a59060a0810190608001611f4b565b6001600160a01b0316036111fb5760405162461bcd60e51b815260206004820152601a60248201527f746f6b656e4f75742073686f756c64206e6f742062652030783000000000000060448201526064016103f6565b600061120a6020830183611efc565b60a00135116112695760405162461bcd60e51b815260206004820152602560248201527f616d6f756e744f75744d696e2073686f756c6420626520677265617465722074604482015264068616e20360dc1b60648201526084016103f6565b6006546001600160a01b031663a0c6a6ef6112848380611f1d565b6112969061010081019060e001611f4b565b6112a36020850185611efc565b6112b49060a0810190608001611f4b565b6112c16020860186611efc565b602001356112ce90611fd5565b6112db6020870187611efc565b60a001356112ec6020880188611efc565b6112fe9061010081019060e001611f4b565b61130b6020890189611efc565b61131c9060e081019060c001611f4b565b61132960208a018a611efc565b6113389061010081019061206e565b61134560208c018c611efc565b6113549061012081019061206e565b6040518b63ffffffff1660e01b81526004016113799a999897969594939291906120e5565b600060405180830381600087803b15801561139357600080fd5b505af11580156113a7573d6000803e3d6000fd5b5050505050565b6113c46113bb8280611f1d565b60200135610723565b6114065760405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a59081b595c9adb19481c9bdbdd606a1b60448201526064016103f6565b60005b6114138280611f1d565b5060028110156114b05761145861142a8380611f1d565b604001826002811061143e5761143e611e9c565b602002013560009081526004602052604090205460ff1690565b1561149e5760405162461bcd60e51b8152602060048201526016602482015275125b9c1d5d081a5cc8185b1c9958591e481cdc195b9d60521b60448201526064016103f6565b806114a881612157565b915050611409565b506000805160206125648339815191526114cd6020830183611efc565b6040516020016114dd91906121b6565b6040516020818303038152906040528051906020012060001c611500919061230e565b61150a8280611f1d565b61010001351461155c5760405162461bcd60e51b815260206004820152601c60248201527f496e636f72726563742065787465726e616c206461746120686173680000000060448201526064016103f6565b60035461156890611fd5565b6115756020830183611efc565b6020013513801561159757506003546115916020830183611efc565b60200135125b6115db5760405162461bcd60e51b8152602060048201526015602482015274125b9d985b1a59081c1d589b1a58c8185b5bdd5b9d605a1b60448201526064016103f6565b604080516101008101909152600090806115f58480611f1d565b6020908101358252016116088480611f1d565b60c00135815260200161161b8480611f1d565b61162d9061010081019060e001611f4b565b6001600160a01b031681526020016116458480611f1d565b610100013581526020016116598480611f1d565b60400135815260200161166c8480611f1d565b60600135815260200161167f8480611f1d565b6080013581526020016116928480611f1d565b60a00135905290506116ed6116a78380611f1d565b6116b1908061206e565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508592506119a0915050565b6117295760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b210383937b7b360991b60448201526064016103f6565b60005b6117368380611f1d565b5060028110156117a1576001600460006117508680611f1d565b604001846002811061176457611764611e9c565b6020020135815260200190815260200160002060006101000a81548160ff021916908315150217905550808061179990612157565b91505061172c565b5060006117b16020840184611efc565b6020013512156117fe5760006117ca6020840184611efc565b6117d8906020810190611f4b565b6001600160a01b0316036117fe5760405162461bcd60e51b81526004016103f690611f88565b61182261180b8380611f1d565b608001356118198480611f1d565b60a00135611a36565b506002805461183f9190640100000000900463ffffffff16612322565b63ffffffff1661184f8380611f1d565b608001357ff3843eddcfcac65d12d9f26261dab50671fdbf5dc44441816c8bbdace2411afd6118816020860186611efc565b61188f90604081019061206e565b60405161189d929190612346565b60405180910390a36002546118c290600190640100000000900463ffffffff16612322565b63ffffffff166118d28380611f1d565b60a001357ff3843eddcfcac65d12d9f26261dab50671fdbf5dc44441816c8bbdace2411afd6119046020860186611efc565b61191290606081019061206e565b604051611920929190612346565b60405180910390a360005b6119358380611f1d565b50600281101561071d576119498380611f1d565b604001816002811061195d5761195d611e9c565b60200201357f5e58f77bbf94b46d8d896e29753e4458c6e59b48581e20ed58c9558e96f297ce60405160405180910390a28061199881612157565b91505061192b565b6000806000806119af866108dc565b600554604051636490cd3d60e11b815293965091945092506001600160a01b03169063c9219a7a906119eb908690869086908b9060040161235a565b602060405180830381865afa158015611a08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a2c9190611f66565b9695505050505050565b6002805460009164010000000090910463ffffffff1690611a78907f0000000000000000000000000000000000000000000000000000000000000000906124c8565b63ffffffff168163ffffffff1603611aeb5760405162461bcd60e51b815260206004820152603060248201527f4d65726b6c6520747265652069732066756c6c2e204e6f206d6f7265206c656160448201526f1d995cc818d85b88189948185919195960821b60648201526084016103f6565b6000611af86002836124dd565b90506000611b06868661039b565b905060008060015b7f000000000000000000000000000000000000000000000000000000000000000063ffffffff168163ffffffff161015611bd257611b4d600286612500565b63ffffffff16600003611b8b57839250611b6c8163ffffffff1661093b565b63ffffffff821660009081526020819052604090208590559150611ba7565b63ffffffff811660009081526020819052604090205492508391505b611bb1838361039b565b9350611bbe6002866124dd565b945080611bca81612523565b915050611b0e565b50600254600090606490611bed9063ffffffff166001612546565b611bf79190612500565b6002805463ffffffff191663ffffffff831690811782556000908152600160205260409020869055909150611c2d908790612546565b6002805463ffffffff929092166401000000000267ffffffff0000000019909216919091179055509394505050505092915050565b60405180604001604052806002906020820280368337509192915050565b60405180604001604052806002905b611c97611c62565b815260200190600190039081611c8f5790505090565b600060208284031215611cbf57600080fd5b5035919050565b60008060408385031215611cd957600080fd5b50508035926020909101359150565b600060208284031215611cfa57600080fd5b813567ffffffffffffffff811115611d1157600080fd5b820160408185031215611d2357600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b600060208284031215611d5257600080fd5b813567ffffffffffffffff80821115611d6a57600080fd5b818401915084601f830112611d7e57600080fd5b813581811115611d9057611d90611d2a565b604051601f8201601f19908116603f01168101908382118183101715611db857611db8611d2a565b81604052828152876020848701011115611dd157600080fd5b826020860160208301376000928101602001929092525095945050505050565b8060005b6002811015611e14578151845260209384019390910190600101611df5565b50505050565b806000805b6002808210611e2e57506113a7565b835186845b83811015611e51578251825260209283019290910190600101611e33565b505050604095909501945060209290920191600101611e1f565b6101008101611e7a8286611df1565b611e876040830185611e1a565b611e9460c0830184611df1565b949350505050565b634e487b7160e01b600052603260045260246000fd5b60408101818360005b6002811015611eda578151835260209283019290910190600101611ebb565b50505092915050565b600060208284031215611ef557600080fd5b5051919050565b6000823561013e19833603018112611f1357600080fd5b9190910192915050565b6000823561011e19833603018112611f1357600080fd5b80356001600160a01b0381168114610f8957600080fd5b600060208284031215611f5d57600080fd5b611d2382611f34565b600060208284031215611f7857600080fd5b81518015158114611d2357600080fd5b6020808252601e908201527f43616e277420776974686472617720746f207a65726f20616464726573730000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000600160ff1b8201611fea57611fea611fbf565b5060000390565b600063ffffffff82168061200757612007611fbf565b6000190192915050565b600080600080600080600080610100898b03121561202e57600080fd5b505086516020880151604089015160608a015160808b015160a08c015160c08d015160e0909d0151959e949d50929b919a50985090965094509092509050565b6000808335601e1984360301811261208557600080fd5b83018035915067ffffffffffffffff8211156120a057600080fd5b6020019150368190038213156120b557600080fd5b9250929050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b038b811682528a81166020830152604082018a9052606082018990528781166080830152861660a082015261010060c0820181905260009061213183820187896120bc565b905082810360e08401526121468185876120bc565b9d9c50505050505050505050505050565b60006001820161216957612169611fbf565b5060010190565b6000808335601e1984360301811261218757600080fd5b830160208101925035905067ffffffffffffffff8111156121a757600080fd5b8036038213156120b557600080fd5b602081526121d7602082016121ca84611f34565b6001600160a01b03169052565b6020820135604082015260006121f06040840184612170565b610140806060860152612208610160860183856120bc565b92506122176060870187612170565b9250601f19808786030160808801526122318585846120bc565b945061223f60808901611f34565b6001600160a01b03811660a0890152935060a088013560c088015261226660c08901611f34565b6001600160a01b03811660e0890152935061228360e08901611f34565b9350610100915061229e828801856001600160a01b03169052565b6122aa82890189612170565b945091506101208188870301818901526122c58686856120bc565b95506122d3818a018a612170565b9550925050808786030183880152506122ed8484836120bc565b979650505050505050565b634e487b7160e01b600052601260045260246000fd5b60008261231d5761231d6122f8565b500690565b63ffffffff82811682821603908082111561233f5761233f611fbf565b5092915050565b602081526000611e946020830184866120bc565b61020081016123698287611df1565b6123766040830186611e1a565b61238360c0830185611df1565b61010082018360005b60088110156123ab57815183526020928301929091019060010161238c565b50505095945050505050565b600181815b808511156123f4578163ffffffff048211156123da576123da611fbf565b808516156123e757918102915b93841c93908002906123bc565b509250929050565b60008261240b57506001610509565b8161241857506000610509565b816001811461242e576002811461243857612469565b6001915050610509565b60ff84111561244957612449611fbf565b6001841b915063ffffffff82111561246357612463611fbf565b50610509565b5060208310610133831016604e8410600b84101617156124a0575081810a63ffffffff81111561249b5761249b611fbf565b610509565b6124aa83836123b7565b8063ffffffff048211156124c0576124c0611fbf565b029392505050565b600063ffffffff6105058185168285166123fc565b600063ffffffff808416806124f4576124f46122f8565b92169190910492915050565b600063ffffffff80841680612517576125176122f8565b92169190910692915050565b600063ffffffff80831681810361253c5761253c611fbf565b6001019392505050565b63ffffffff81811683821601908082111561233f5761233f611fbf56fe30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001a26469706673582212209ca675e4ccbe1def982f314ad500f39f9a85ec2e401363510d158dfc147d646364736f6c63430008120033";

type MultiAssetShieldedPoolConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MultiAssetShieldedPoolConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MultiAssetShieldedPool__factory extends ContractFactory {
  constructor(...args: MultiAssetShieldedPoolConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _hasherAddress: PromiseOrValue<string>,
    _verifier: PromiseOrValue<string>,
    _swapExecutor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MultiAssetShieldedPool> {
    return super.deploy(
      _hasherAddress,
      _verifier,
      _swapExecutor,
      overrides || {}
    ) as Promise<MultiAssetShieldedPool>;
  }
  override getDeployTransaction(
    _hasherAddress: PromiseOrValue<string>,
    _verifier: PromiseOrValue<string>,
    _swapExecutor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _hasherAddress,
      _verifier,
      _swapExecutor,
      overrides || {}
    );
  }
  override attach(address: string): MultiAssetShieldedPool {
    return super.attach(address) as MultiAssetShieldedPool;
  }
  override connect(signer: Signer): MultiAssetShieldedPool__factory {
    return super.connect(signer) as MultiAssetShieldedPool__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MultiAssetShieldedPoolInterface {
    return new utils.Interface(_abi) as MultiAssetShieldedPoolInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MultiAssetShieldedPool {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MultiAssetShieldedPool;
  }
}
